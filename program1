// ==UserScript==
// @name         Rulik Mod 2.0
// @namespace    http://tampermonkey.net/
// @version      2.0
// @description  Шось тут таке
// @author       Щоденник
// @match        *://disgusting.ivano-frankivsk.ua/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Default settings
    const defaultConfig = {
        videoUrl: 'https://cdn.pixabay.com/video/2020/04/09/35573-407595474_large.mp4',
        snowEnabled: false,
        videoBackgroundEnabled: true,
        backgroundEnabled: true,
        snowflakeCount: 100,
        snowflakeColor: 'white',
        buttonSelector: '.form-block-buttons-submit',
        backgroundImageUrl: '',
        mouseButton: 1,
        theme: 'light'
    };

    // Themes with new structure
    const themes = {
        dark: { body: { backgroundColor: '#2c3e50', color: '#ecf0f1' }, panel: { background: 'linear-gradient(135deg, #2c3e50, #34495e)', color: '#ecf0f1' }, inputs: { background: '#ecf0f1', color: '#2c3e50' }, hover: { color: '#3498db' } },
        light: { body: { backgroundColor: '#ecf0f1', color: '#2c3e50' }, panel: { background: 'linear-gradient(135deg, #ecf0f1, #dfe6e9)', color: '#2c3e50' }, inputs: { background: '#34495e', color: '#ecf0f1' }, hover: { color: '#e74c3c' } },
        neon: { body: { backgroundColor: '#1a1a1a', color: '#00ffcc' }, panel: { background: 'linear-gradient(135deg, #1a1a1a, #333333)', color: '#00ffcc' }, inputs: { background: '#00ffcc', color: '#1a1a1a' }, hover: { color: '#ff00ff' } },
        pastel: { body: { backgroundColor: '#f7e7ce', color: '#6b5b95' }, panel: { background: 'linear-gradient(135deg, #f7e7ce, #d5c6e0)', color: '#6b5b95' }, inputs: { background: '#fff0f5', color: '#6b5b95' }, hover: { color: '#ff6f61' } },
        solarized: { body: { backgroundColor: '#002b36', color: '#93a1a1' }, panel: { background: 'linear-gradient(135deg, #002b36, #073642)', color: '#93a1a1' }, inputs: { background: '#fdf6e3', color: '#657b83' }, hover: { color: '#b58900' } },
        monochrome: { body: { backgroundColor: '#333333', color: '#cccccc' }, panel: { background: 'linear-gradient(135deg, #333333, #555555)', color: '#cccccc' }, inputs: { background: '#ffffff', color: '#333333' }, hover: { color: '#999999' } },
        cyberpunk: { body: { backgroundColor: '#0d0d0d', color: '#ff00ff' }, panel: { background: 'linear-gradient(135deg, #0d0d0d, #1a1a1a)', color: '#ff00ff' }, inputs: { background: '#00ffff', color: '#0d0d0d' }, hover: { color: '#00ffff' } },
        forest: { body: { backgroundColor: '#1b2f2a', color: '#d4e4d9' }, panel: { background: 'linear-gradient(135deg, #1b2f2a, #2e4f47)', color: '#d4e4d9' }, inputs: { background: '#d4e4d9', color: '#1b2f2a' }, hover: { color: '#8bc34a' } },
        dusk: { body: { backgroundColor: '#3e3e5e', color: '#b8b8d1' }, panel: { background: 'linear-gradient(135deg, #3e3e5e, #4a4a78)', color: '#b8b8d1' }, inputs: { background: '#b8b8d1', color: '#3e3e5e' }, hover: { color: '#7e7eb8' } },
        stone: { body: { backgroundColor: '#4a4a4a', color: '#d9d9d9' }, panel: { background: 'linear-gradient(135deg, #4a4a4a, #5e5e5e)', color: '#d9d9d9' }, inputs: { background: '#d9d9d9', color: '#4a4a4a' }, hover: { color: '#a8a8a8' } },
        ocean: { body: { backgroundColor: '#1e3d59', color: '#f5f6eb' }, panel: { background: 'linear-gradient(135deg, #1e3d59, #2a5778)', color: '#f5f6eb' }, inputs: { background: '#f5f6eb', color: '#1e3d59' }, hover: { color: '#ff9f1c' } },
        sunset: { body: { backgroundColor: '#ff6f61', color: '#2d1b4e' }, panel: { background: 'linear-gradient(135deg, #ff6f61, #ff8c94)', color: '#2d1b4e' }, inputs: { background: '#2d1b4e', color: '#ff6f61' }, hover: { color: '#ffd700' } },
        emerald: { body: { backgroundColor: '#2e7d32', color: '#f1f8e9' }, panel: { background: 'linear-gradient(135deg, #2e7d32, #388e3c)', color: '#f1f8e9' }, inputs: { background: '#f1f8e9', color: '#2e7d32' }, hover: { color: '#ffb300' } },
        vintage: { body: { backgroundColor: '#8d5524', color: '#f4e8c1' }, panel: { background: 'linear-gradient(135deg, #8d5524, #a66d3b)', color: '#f4e8c1' }, inputs: { background: '#f4e8c1', color: '#8d5524' }, hover: { color: '#d4a017' } },
        arctic: { body: { backgroundColor: '#d0e8f2', color: '#2a3d66' }, panel: { background: 'linear-gradient(135deg, #d0e8f2, #b8d8e8)', color: '#2a3d66' }, inputs: { background: '#2a3d66', color: '#d0e8f2' }, hover: { color: '#ff6b6b' } }
    };

   const fallbackBarcodeMap = {
    ']C17460304025002': '2100100137359', // arawak 180
    ']C17460309025002': '2100100137342',
    ']C17460313025002': '2100100137335',
    ']C17460302025002': '2100100137311',
    ']C17460318025002': '2100100137304',
    ']C17460320025002': '2100100137298',
    ']C17460311025002': '2100100137281',
    ']C17460312025002': '2100100137274',
    ']C17460310025002': '7460310025002',
    ']C17460305025002': '2100100136451',
    ']C17460306025002': '2100100136444',
    ']C17460327025002': '2100100135362',
    ']C17460317025002': '2100100135355',
    ']C17460319025002': '2100100135348',
    ']C17460323025002': '2100100133337',
    ']C17460303025002': '2100100133313',
    ']C17460316025002': '2100100133306',
    ']C17460301025002': '2100100133290',
    ']C17460324025002': '2100100133283',
    ']C17460326025002': '2100100133276',
    ']C17460325025002': '2100100133252',
    ']C17460314025002': '2100100133245',
    '4823456780564': '4823456780038', // mexico
    '4823456780533': '4823456780052', // lemon cake
    '7460330004002': '2100100188788',
    ']C17460309004002': '2100100187156',
    ']C17460313004002': '2100100137991',
    ']C17460322004002': '7460322004002',
    ']C17460311004002': '2100100137960',
    ']C17460312004002': '2100100137953',
    ']C17460307004002': '2100100137939',
    ']C17460327004002': '2100100137243',
    ']C17460306004002': '2100100136437',
    ']C17460308004002': '7460308004002',
    ']C17460305004002': '2100100136413',
    ']C17460310004002': '2100100136406',
    ']C17460303004002': '2100100133207',
    ']C17460315004002': '2100100133191',
    ']C17460316004002': '2100100133184',
    ']C17460323004002': '2100100133177',
    ']C17460325004002': '2100100133153',
    ']C17460314004002': '2100100133146',
    ']C10148930590000008': '2100100189440',
    ']C10148930580000001': '2100100189433',
    ']C10148930540000003': '2100100189426',
    ']C10132982920000003': '2100100180638',
    ']C10132982960000001': '2100100180621',
    ']C10165988930000000': '2100100180607',
    ']C10132981540000004': '2100100180560',
    ']C10132981960000004': '2100100180553',
    ']C10122988920000008': '2100100180546',
    ']C10165988970000008': '2100100180515',
    ']C10164988940000008': '2100100180485',
    ']C10132981710000001': '2100100180478',
    ']C10132981170000009': '2100100180782',
    ']C10192988920000007': '2100100180720',
    ']C10165988990000002': '2100100180652',
    ']C10132981610000002': '2100100180751',
    ']C10132981940000000': '2100100187781',
    ']C10132981690000008': '2100100180775',
    ']C10184729275716004': '2100100196417',
    ']C10184729274732005': '2100100196882',
    ']C10132981870000002': '2100100196639',
    ']C10184729274734009': '2100100196622',
    ']C10184729275727000': '2100100196615',
    ']C10184729275713003': '2100100196608',
    ']C10184729275721008': '2100100196585',
    ']C10184729275726003': '2100100196578',
    ']C10132983920000000': '2100100196561',
    ']C10132981890000006': '2100100196554',
    ']C10132981930000003': '2100100196516',
    ']C10132981860000005': '2100100196509',
    ']C10132981980000008': '2100100196493',
    ']C10132982950000004': '2100100196486',
    ']C10132983940000004': '2100100196479',
    ']C10132983910000003': '2100100196462',
    ']C10132982940000007': '2100100196424',
    '8991475068232': '2100100107567'
};

    let barcodeMap = fallbackBarcodeMap;

    fetch('https://raw.githubusercontent.com/1stMaverick/ProgramaFixer/refs/heads/main/barcodes.json')
        .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json();
        })
        .then(data => {
            barcodeMap = data;
            console.log('Barcode map successfully loaded from GitHub:', barcodeMap);
        })
        .catch(error => {
            console.error('Failed to load barcode map from GitHub, using fallback:', error);
            barcodeMap = fallbackBarcodeMap;
        });

    document.addEventListener('dblclick', function(event) {
        if (event.target.classList.contains('vs__selected')) {
            if (event.target.style.textDecoration === 'line-through' && event.target.style.color === 'red') {
                event.target.style.textDecoration = 'none';
                event.target.style.color = '';
            } else if (event.target.style.textDecoration === 'line-through') {
                event.target.style.color = 'red';
            } else {
                event.target.style.textDecoration = 'line-through';
                event.target.style.color = '';
            }
        }
    });

    let config = JSON.parse(localStorage.getItem('userSettings')) || defaultConfig;

    function saveSettings() {
        localStorage.setItem('userSettings', JSON.stringify(config));
    }

    function applyTheme() {
        const selectedTheme = themes[config.theme] || themes['light'];
        
        // Применяем цвета текста и hover всегда
        document.body.style.color = selectedTheme.body.color;
        document.querySelectorAll('button, a').forEach(el => {
            el.style.color = selectedTheme.hover.color;
        });

        // Применяем фон только если backgroundEnabled включен
        if (config.backgroundEnabled) {
            document.body.style.backgroundColor = selectedTheme.body.backgroundColor;
            if (config.backgroundImageUrl) {
                document.body.style.backgroundImage = `url("${config.backgroundImageUrl}")`;
                document.body.style.backgroundSize = 'cover';
            } else {
                document.body.style.backgroundImage = 'none';
            }
        } else {
            document.body.style.backgroundColor = '';
            document.body.style.backgroundImage = 'none';
        }

        // Применяем стили панели и инпутов
        const panel = document.querySelector('.settings-panel');
        if (panel) {
            panel.style.background = selectedTheme.panel.background;
            panel.style.color = selectedTheme.panel.color;
        }

        document.querySelectorAll('input, select').forEach(el => {
            el.style.background = selectedTheme.inputs.background;
            el.style.color = selectedTheme.inputs.color;
        });
    }

    function createSettingsPanel() {
        const panel = document.createElement('div');
        panel.className = 'settings-panel';
        panel.style.position = 'fixed';
        panel.style.top = '20px';
        panel.style.left = '20px';
        panel.style.padding = '30px';
        panel.style.borderRadius = '15px';
        panel.style.boxShadow = '0 10px 20px rgba(0, 0, 0, 0.4), inset 0 0 10px rgba(255, 255, 255, 0.05)';
        panel.style.zIndex = '9999';
        panel.style.fontFamily = "'Segoe UI', Arial, sans-serif";
        panel.style.width = '320px';
        panel.style.backdropFilter = 'blur(8px)';
        panel.style.border = '1px solid rgba(255, 255, 255, 0.15)';
        panel.style.display = 'none';
        panel.style.opacity = '0';
        panel.style.transform = 'translateY(-20px)';
        panel.style.transition = 'opacity 0.3s ease, transform 0.3s ease';

        const title = document.createElement('h2');
        title.textContent = 'Rulik Mod 2.0';
        title.style.textAlign = 'center';
        title.style.margin = '0 0 30px 0';
        title.style.fontSize = '24px';
        title.style.fontWeight = '700';
        title.style.textTransform = 'uppercase';
        title.style.letterSpacing = '2px';
        panel.appendChild(title);

        function styleInput(input) {
            input.style.width = '100%';
            input.style.padding = '10px 15px';
            input.style.margin = '8px 0 20px 0';
            input.style.border = 'none';
            input.style.borderRadius = '8px';
            input.style.fontSize = '15px';
            input.style.boxSizing = 'border-box';
            input.style.boxShadow = 'inset 0 2px 4px rgba(0, 0, 0, 0.2)';
            input.style.transition = 'all 0.3s ease';
            input.placeholder = input.placeholder;
            input.addEventListener('focus', () => {
                input.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.5)';
            });
            input.addEventListener('blur', () => {
                input.style.boxShadow = 'inset 0 2px 4px rgba(0, 0, 0, 0.2)';
            });
        }

        const videoUrlInput = document.createElement('input');
        videoUrlInput.type = 'text';
        videoUrlInput.value = config.videoUrl;
        videoUrlInput.placeholder = 'Video URL';
        styleInput(videoUrlInput);
        videoUrlInput.addEventListener('input', () => {
            config.videoUrl = videoUrlInput.value;
            saveSettings();
        });
        panel.appendChild(document.createElement('label')).textContent = 'Video URL:';
        panel.appendChild(videoUrlInput);

        const bgUrlInput = document.createElement('input');
        bgUrlInput.type = 'text';
        bgUrlInput.value = config.backgroundImageUrl;
        bgUrlInput.placeholder = 'Background Image URL';
        styleInput(bgUrlInput);
        bgUrlInput.addEventListener('input', () => {
            config.backgroundImageUrl = bgUrlInput.value;
            saveSettings();
            applyTheme();
        });
        panel.appendChild(document.createElement('label')).textContent = 'Background Image URL:';
        panel.appendChild(bgUrlInput);

        function styleCheckboxWrapper(checkbox, labelText) {
            const wrapper = document.createElement('div');
            wrapper.style.display = 'flex';
            wrapper.style.alignItems = 'center';
            wrapper.style.margin = '15px 0';
            wrapper.style.padding = '8px';
            wrapper.style.borderRadius = '6px';
            wrapper.style.transition = 'background 0.3s ease';

            checkbox.style.marginRight = '12px';
            checkbox.style.transform = 'scale(1.3)';
            checkbox.style.cursor = 'pointer';

            const label = document.createElement('span');
            label.textContent = labelText;
            label.style.fontSize = '15px';
            label.style.cursor = 'pointer';
            label.style.flex = '1';

            wrapper.appendChild(checkbox);
            wrapper.appendChild(label);
            wrapper.addEventListener('mouseover', () => wrapper.style.background = 'rgba(255, 255, 255, 0.1)');
            wrapper.addEventListener('mouseout', () => wrapper.style.background = 'rgba(255, 255, 255, 0.05)');
            return wrapper;
        }

        const snowCheckbox = document.createElement('input');
        snowCheckbox.type = 'checkbox';
        snowCheckbox.checked = config.snowEnabled;
        snowCheckbox.addEventListener('change', () => {
            config.snowEnabled = snowCheckbox.checked;
            saveSettings();
            if (config.snowEnabled) createSnowfall(); else removeSnowfall();
        });
        panel.appendChild(styleCheckboxWrapper(snowCheckbox, 'Enable Snowfall'));

        const videoBgCheckbox = document.createElement('input');
        videoBgCheckbox.type = 'checkbox';
        videoBgCheckbox.checked = config.videoBackgroundEnabled;
        videoBgCheckbox.addEventListener('change', () => {
            config.videoBackgroundEnabled = videoBgCheckbox.checked;
            saveSettings();
            if (config.videoBackgroundEnabled) setupVideoBackground(); else removeVideoBackground();
        });
        panel.appendChild(styleCheckboxWrapper(videoBgCheckbox, 'Enable Video Background'));

        const backgroundCheckbox = document.createElement('input');
        backgroundCheckbox.type = 'checkbox';
        backgroundCheckbox.checked = config.backgroundEnabled;
        backgroundCheckbox.addEventListener('change', () => {
            config.backgroundEnabled = backgroundCheckbox.checked;
            saveSettings();
            applyTheme();
        });
        panel.appendChild(styleCheckboxWrapper(backgroundCheckbox, 'Enable Background'));

        const mouseButtonLabel = document.createElement('label');
        mouseButtonLabel.textContent = 'Mouse Button for Copy Action:';
        mouseButtonLabel.style.display = 'block';
        mouseButtonLabel.style.marginBottom = '8px';
        panel.appendChild(mouseButtonLabel);

        const mouseButtonSelect = document.createElement('select');
        styleInput(mouseButtonSelect);
        const mouseOptions = [
            { value: 0, text: 'Left Button' },
            { value: 1, text: 'Middle Button' },
            { value: 2, text: 'Right Button' }
        ];
        mouseOptions.forEach(opt => {
            const option = document.createElement('option');
            option.value = opt.value;
            option.textContent = opt.text;
            if (opt.value === config.mouseButton) option.selected = true;
            mouseButtonSelect.appendChild(option);
        });
        mouseButtonSelect.addEventListener('change', () => {
            config.mouseButton = parseInt(mouseButtonSelect.value, 10);
            saveSettings();
        });
        panel.appendChild(mouseButtonSelect);

        const themeLabel = document.createElement('label');
        themeLabel.textContent = 'Site Theme:';
        themeLabel.style.display = 'block';
        themeLabel.style.marginBottom = '8px';
        panel.appendChild(themeLabel);

        const themeSelect = document.createElement('select');
        styleInput(themeSelect);
        const themeOptions = [
            { value: 'dark', text: 'Dark' },
            { value: 'light', text: 'Light' },
            { value: 'neon', text: 'Neon' },
            { value: 'pastel', text: 'Pastel' },
            { value: 'solarized', text: 'Solarized' },
            { value: 'monochrome', text: 'Monochrome' },
            { value: 'cyberpunk', text: 'Cyberpunk' },
            { value: 'forest', text: 'Forest' },
            { value: 'dusk', text: 'Dusk' },
            { value: 'stone', text: 'Stone' },
            { value: 'ocean', text: 'Ocean' },
            { value: 'sunset', text: 'Sunset' },
            { value: 'emerald', text: 'Emerald' },
            { value: 'vintage', text: 'Vintage' },
            { value: 'arctic', text: 'Arctic' }
        ];
        themeOptions.forEach(opt => {
            const option = document.createElement('option');
            option.value = opt.value;
            option.textContent = opt.text;
            if (opt.value === config.theme) option.selected = true;
            themeSelect.appendChild(option);
        });
        themeSelect.addEventListener('change', () => {
            config.theme = themeSelect.value;
            saveSettings();
            applyTheme();
        });
        panel.appendChild(themeSelect);

        const toggleButton = document.createElement('button');
        toggleButton.textContent = 'Rulik Mod';
        toggleButton.style.position = 'fixed';
        toggleButton.style.bottom = '20px';
        toggleButton.style.left = '20px';
        toggleButton.style.zIndex = '9999';
        toggleButton.style.padding = '12px 25px';
        toggleButton.style.background = 'linear-gradient(145deg, #00cec9, #0984e3)';
        toggleButton.style.color = '#fff';
        toggleButton.style.border = 'none';
        toggleButton.style.borderRadius = '10px';
        toggleButton.style.cursor = 'pointer';
        toggleButton.style.fontSize = '16px';
        toggleButton.style.fontWeight = '600';
        toggleButton.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.3)';
        toggleButton.style.transition = 'all 0.3s ease';
        toggleButton.addEventListener('mouseover', () => {
            toggleButton.style.transform = 'translateY(-2px)';
            toggleButton.style.boxShadow = '0 8px 16px rgba(0, 206, 201, 0.5)';
        });
        toggleButton.addEventListener('mouseout', () => {
            toggleButton.style.transform = 'translateY(0)';
            toggleButton.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.3)';
        });
        toggleButton.addEventListener('click', () => {
            if (panel.style.display === 'none') {
                panel.style.display = 'block';
                setTimeout(() => {
                    panel.style.opacity = '1';
                    panel.style.transform = 'translateY(0)';
                }, 10);
                toggleButton.textContent = 'Hide Settings';
            } else {
                panel.style.opacity = '0';
                panel.style.transform = 'translateY(-20px)';
                setTimeout(() => panel.style.display = 'none', 300);
                toggleButton.textContent = 'Rulik Mod';
            }
        });

        document.body.appendChild(toggleButton);
        document.body.appendChild(panel);
    }

    function getRandomColor() {
        const letters = "0123456789ACDEF";
        let color;
        do {
            color = "#";
            for (let i = 0; i < 6; i++) color += letters[Math.floor(Math.random() * letters.length)];
        } while (isBlueColor(color));
        return color;
    }

    function isBlueColor(color) {
        const blueRegex = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})/i;
        const match = blueRegex.exec(color);
        if (match) {
            const r = parseInt(match[1], 16);
            const g = parseInt(match[2], 16);
            const b = parseInt(match[3], 16);
            return b > r && b > g;
        }
        return false;
    }

    function addClickListener(button) {
        button.addEventListener('click', () => button.style.backgroundColor = getRandomColor());
    }

    function observeDOMChanges() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length) {
                    mutation.addedNodes.forEach((node) => {
                        if (node.classList && node.classList.contains('form-block-buttons-submit')) addClickListener(node);
                    });
                }
            });
        });
        observer.observe(document.body, { childList: true, subtree: true });
    }

    observeDOMChanges();

    function handleMiddleClickOnCopyButton(event) {
        if (event.button === config.mouseButton) {
            navigator.clipboard.readText().then(text => {
                if (text) {
                    const searchUrl = `https://aladin-kiev.com/ua/search/?search=${encodeURIComponent(text)}`;
                    window.open(searchUrl, '_blank');
                    console.log(`Открыта новая вкладка с поиском: ${text}`);
                }
            }).catch(err => console.log('Ошибка буфера обмена:', err));
        }
    }

    function addClickHandlerToAllCopyButtons() {
        const copyButtons = document.querySelectorAll('.copy-button');
        copyButtons.forEach(button => {
            if (!button.dataset.listenerAdded) {
                button.addEventListener('mousedown', handleMiddleClickOnCopyButton);
                button.dataset.listenerAdded = "true";
            }
        });
    }

    const observer = new MutationObserver(() => addClickHandlerToAllCopyButtons());
    observer.observe(document.body, { childList: true, subtree: true });
    addClickHandlerToAllCopyButtons();

    function setupVideoBackground() {
        if (config.videoBackgroundEnabled) {
            const video = document.createElement('video');
            video.src = config.videoUrl;
            video.autoplay = true;
            video.loop = true;
            video.muted = true;
            video.style.position = 'fixed';
            video.style.top = '0';
            video.style.left = '0';
            video.style.width = '100%';
            video.style.height = '100%';
            video.style.objectFit = 'cover';
            video.style.zIndex = '-1';
            document.body.appendChild(video);
        }
    }

    function removeVideoBackground() {
        const video = document.querySelector('video');
        if (video) video.remove();
    }

    function createSnowfall() {
        if (config.snowEnabled) {
            for (let i = 0; i < config.snowflakeCount; i++) {
                const snowflake = document.createElement('div');
                snowflake.className = 'snowflake';
                snowflake.style.position = 'fixed';
                snowflake.style.top = `${Math.random() * 100}vh`;
                snowflake.style.left = `${Math.random() * 100}vw`;
                snowflake.style.width = '10px';
                snowflake.style.height = '10px';
                snowflake.style.backgroundColor = config.snowflakeColor;
                snowflake.style.borderRadius = '50%';
                snowflake.style.opacity = Math.random();
                snowflake.style.zIndex = '9999';
                snowflake.style.animation = `fall ${Math.random() * 5 + 5}s linear infinite`;
                document.body.appendChild(snowflake);
            }
            const style = document.createElement('style');
            style.innerHTML = `@keyframes fall { to { transform: translateY(100vh); } }`;
            document.head.appendChild(style);
        }
    }

    function removeSnowfall() {
        document.querySelectorAll('.snowflake').forEach(snowflake => snowflake.remove());
    }

    function removeBracketsAndNumbers(event) {
        event.preventDefault();
        const selection = window.getSelection().toString();
        const modifiedText = selection.replace(/\[\d+\]|\(\d+\)/g, '');
        event.clipboardData.setData('text/plain', modifiedText);
    }

    function replaceChars(event) {
        event.target.value = event.target.value.replace(/[\s,юб]/g, '.');
    }

    function addEventListenerWithDelay() {
        const field = document.querySelector('#weight_1.form-shipment-store-table-left-row-control');
        if (field) field.addEventListener('input', replaceChars);
    }

    const observerReplace = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
                if (node.id === 'weight_1' && node.classList.contains('form-shipment-store-table-left-row-control')) {
                    addEventListenerWithDelay();
                }
            });
        });
    });

    observerReplace.observe(document.body, { childList: true, subtree: true });
    setInterval(addEventListenerWithDelay, 2000);
    document.addEventListener('copy', removeBracketsAndNumbers);

    function replaceInputValue(event) {
        let inputValue = event.target.value.trim();
        const correctBarcode = barcodeMap[inputValue];
        if (correctBarcode) {
            event.target.value = correctBarcode;
            const inputEvent = new Event('input', { bubbles: true, cancelable: true });
            event.target.dispatchEvent(inputEvent);
            const enterEvent = new KeyboardEvent('keydown', { bubbles: true, cancelable: true, key: 'Enter' });
            event.target.dispatchEvent(enterEvent);
        }
    }

    function replaceAndClearBarcode() {
        const barcodeInput = document.querySelector('#barcode.barcode-input');
        if (barcodeInput && barcodeInput.value) {
            const value = barcodeInput.value.trim();
            const correctBarcode = barcodeMap[value];
            if (correctBarcode) {
                barcodeInput.value = correctBarcode;
                const inputEvent = new Event('input', { bubbles: true, cancelable: true });
                barcodeInput.dispatchEvent(inputEvent);
                const enterEvent = new KeyboardEvent('keydown', { bubbles: true, cancelable: true, key: 'Enter' });
                barcodeInput.dispatchEvent(enterEvent);
            }
            setTimeout(() => barcodeInput.value = '', 5);
        }
    }

    const observerClearBarcode = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') replaceAndClearBarcode();
        });
    });

    observerClearBarcode.observe(document.body, { childList: true, subtree: true });
    document.body.addEventListener('input', replaceInputValue);

    createSettingsPanel();
    applyTheme();
    setupVideoBackground();
    if (config.snowEnabled) createSnowfall();
})();
