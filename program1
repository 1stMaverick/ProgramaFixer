// ==UserScript==
// @name         Rulik Mod 2.0
// @namespace    http://tampermonkey.net/
// @version      1.9.2
// @description  Фіксииииии з GitHub баркодами та всіма темами
// @author       You
// @match        *://disgusting.ivano-frankivsk.ua/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    let barcodeMap = {};

    // Завантаження barcodeMap з GitHub
    async function loadBarcodeMapFromGitHub() {
        try {
            const url = 'https://raw.githubusercontent.com/1stMaverick/ProgramaFixer/refs/heads/main/barcodes.json';
            const response = await fetch(url);
            if (!response.ok) throw new Error('Не вдалося завантажити barcodes.json');
            barcodeMap = await response.json();
            console.log('barcodeMap завантажено з GitHub:', barcodeMap);
        } catch (error) {
            console.error('Помилка завантаження barcodeMap:', error);
            barcodeMap = { ']C17460304025002': '2100100137359', '8991475068232': '2100100107567' }; // Fallback
        }
    }

    // Конфігурація за замовчуванням
    const defaultConfig = {
        videoUrl: 'https://cdn.pixabay.com/video/2020/04/09/35573-407595474_large.mp4',
        snowEnabled: false,
        videoBackgroundEnabled: true,
        snowflakeCount: 100,
        snowflakeColor: 'white',
        buttonSelector: '.form-block-buttons-submit',
        backgroundImageUrl: '',
        copyButtonMouse: 1,
        theme: 'dark',
        videoPlayerEnabled: false,
        videoPlayerUrl: '',
        videoPlayerType: 'youtube',
        customCursorEnabled: false,
        cursorStyle: 'circle',
        videoPlayerWidth: 300,
        videoPlayerHeight: 169,
        videoPlayerX: 20,
        videoPlayerY: window.innerHeight - 189
    };

    let config = JSON.parse(localStorage.getItem('userSettings')) || defaultConfig;
    const saveSettings = () => localStorage.setItem('userSettings', JSON.stringify(config));

    const applyTheme = () => {
        const themes = {
            dark: { body: { backgroundColor: '#2c3e50', color: '#ecf0f1' }, panel: { background: 'linear-gradient(135deg, #2c3e50, #34495e)', color: '#ecf0f1' }, inputs: { background: '#ecf0f1', color: '#2c3e50' }, hover: { color: '#3498db' } },
            light: { body: { backgroundColor: '#ecf0f1', color: '#2c3e50' }, panel: { background: 'linear-gradient(135deg, #ecf0f1, #dfe6e9)', color: '#2c3e50' }, inputs: { background: '#34495e', color: '#ecf0f1' }, hover: { color: '#e74c3c' } },
            neon: { body: { backgroundColor: '#1a1a1a', color: '#00ffcc' }, panel: { background: 'linear-gradient(135deg, #1a1a1a, #333333)', color: '#00ffcc' }, inputs: { background: '#00ffcc', color: '#1a1a1a' }, hover: { color: '#ff00ff' } },
            pastel: { body: { backgroundColor: '#f7e7ce', color: '#6b5b95' }, panel: { background: 'linear-gradient(135deg, #f7e7ce, #d5c6e0)', color: '#6b5b95' }, inputs: { background: '#fff0f5', color: '#6b5b95' }, hover: { color: '#ff6f61' } },
            solarized: { body: { backgroundColor: '#002b36', color: '#93a1a1' }, panel: { background: 'linear-gradient(135deg, #002b36, #073642)', color: '#93a1a1' }, inputs: { background: '#fdf6e3', color: '#657b83' }, hover: { color: '#b58900' } },
            monochrome: { body: { backgroundColor: '#333333', color: '#cccccc' }, panel: { background: 'linear-gradient(135deg, #333333, #555555)', color: '#cccccc' }, inputs: { background: '#ffffff', color: '#333333' }, hover: { color: '#999999' } },
            cyberpunk: { body: { backgroundColor: '#0d0d0d', color: '#ff00ff' }, panel: { background: 'linear-gradient(135deg, #0d0d0d, #1a1a1a)', color: '#ff00ff' }, inputs: { background: '#00ffff', color: '#0d0d0d' }, hover: { color: '#00ffff' } },
            forest: { body: { backgroundColor: '#1b2f2a', color: '#d4e4d9' }, panel: { background: 'linear-gradient(135deg, #1b2f2a, #2e4f47)', color: '#d4e4d9' }, inputs: { background: '#d4e4d9', color: '#1b2f2a' }, hover: { color: '#8bc34a' } },
            dusk: { body: { backgroundColor: '#3e3e5e', color: '#b8b8d1' }, panel: { background: 'linear-gradient(135deg, #3e3e5e, #4a4a78)', color: '#b8b8d1' }, inputs: { background: '#b8b8d1', color: '#3e3e5e' }, hover: { color: '#7e7eb8' } },
            stone: { body: { backgroundColor: '#4a4a4a', color: '#d9d9d9' }, panel: { background: 'linear-gradient(135deg, #4a4a4a, #5e5e5e)', color: '#d9d9d9' }, inputs: { background: '#d9d9d9', color: '#4a4a4a' }, hover: { color: '#a8a8a8' } }
        };

        const selectedTheme = themes[config.theme] || themes.dark;
        const body = document.body;
        body.style.transition = 'background-color 0.5s ease, color 0.5s ease';
        Object.assign(body.style, selectedTheme.body);

        const panel = document.querySelector('.settings-panel');
        if (panel) {
            panel.style.transition = 'background 0.5s ease, color 0.5s ease';
            Object.assign(panel.style, selectedTheme.panel);
            const inputs = panel.querySelectorAll('input[type="text"], select');
            inputs.forEach(input => {
                input.style.transition = 'background 0.5s ease, color 0.5s ease';
                Object.assign(input.style, selectedTheme.inputs);
            });
            const labels = panel.querySelectorAll('label');
            labels.forEach(label => {
                label.style.transition = 'color 0.5s ease';
                label.style.color = selectedTheme.body.color;
            });
        }

        clearTimeout(window.themeTimeout);
        window.themeTimeout = setTimeout(() => {
            body.style.transition = '';
            if (panel) {
                panel.style.transition = '';
                inputs.forEach(input => input.style.transition = '');
                labels.forEach(label => label.style.transition = '');
            }
        }, 500);
    };

    const createSettingsPanel = () => {
        const styleSheet = document.createElement('style');
        styleSheet.innerHTML = `
            .settings-panel { position: fixed; top: 20px; left: 20px; padding: 20px; border-radius: 12px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); z-index: 9999; font-family: Arial, sans-serif; width: 300px; opacity: 0; transform: translateY(-20px); transition: opacity 0.3s ease, transform 0.3s ease; cursor: move; pointer-events: auto; }
            .settings-panel.visible { opacity: 1; transform: translateY(0); }
            .settings-panel.hidden { opacity: 0; pointer-events: none; }
            .settings-panel h2 { margin: 0 0 20px; text-align: center; font-size: 22px; text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); cursor: grab; }
            .settings-panel label { display: flex; align-items: center; margin-bottom: 15px; font-size: 14px; cursor: pointer; transition: color 0.2s ease; }
            .settings-panel input[type="text"], .settings-panel select { width: 100%; padding: 8px; margin-left: 10px; border: none; border-radius: 6px; font-size: 12px; box-sizing: border-box; }
            .settings-panel input[type="checkbox"] { margin-left: 10px; transform: scale(1.2); }
            .toggle-button { position: fixed; top: 900px; right: 20px; z-index: 9999; padding: 10px 20px; background: linear-gradient(135deg, #3498db, #2980b9); color: #ecf0f1; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s ease, box-shadow 0.2s ease; }
            .toggle-button:hover { transform: translateY(-2px); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3); }
            .toggle-button:active { transform: translateY(0); box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); }
            #video-player-container { position: fixed; z-index: 9998; border: 2px solid #ccc; border-radius: 5px; background: rgba(0, 0, 0, 0.5); cursor: move; }
            #video-player-container iframe { width: 100%; height: 100%; border: none; pointer-events: auto; }
            #video-player-container .resize-handle { position: absolute; bottom: -5px; right: -5px; width: 10px; height: 10px; background: #fff; border: 1px solid #000; cursor: nwse-resize; }
        `;
        document.head.appendChild(styleSheet);

        const panel = document.createElement('div');
        panel.className = 'settings-panel hidden';
        const title = document.createElement('h2');
        title.textContent = 'Rulik Mod 2.0 Settings';
        panel.appendChild(title);

        const createLabel = (text, input) => {
            const label = document.createElement('label');
            label.textContent = text;
            label.appendChild(input);
            return label;
        };

        const videoUrlInput = document.createElement('input');
        videoUrlInput.type = 'text';
        videoUrlInput.value = config.videoUrl;
        videoUrlInput.placeholder = 'Background Video URL';
        videoUrlInput.addEventListener('input', (e) => {
            config.videoUrl = e.target.value;
            saveSettings();
            if (config.videoBackgroundEnabled) { removeVideoBackground(); setupVideoBackground(); }
        });
        panel.appendChild(createLabel('BG Video URL: ', videoUrlInput));

        const bgUrlInput = document.createElement('input');
        bgUrlInput.type = 'text';
        bgUrlInput.value = config.backgroundImageUrl;
        bgUrlInput.placeholder = 'Background Image URL';
        bgUrlInput.addEventListener('input', (e) => {
            config.backgroundImageUrl = e.target.value;
            saveSettings();
            document.body.style.backgroundImage = config.backgroundImageUrl ? `url("${config.backgroundImageUrl}")` : '';
        });
        panel.appendChild(createLabel('Background URL: ', bgUrlInput));

        const snowCheckbox = document.createElement('input');
        snowCheckbox.type = 'checkbox';
        snowCheckbox.checked = config.snowEnabled;
        snowCheckbox.addEventListener('change', (e) => {
            config.snowEnabled = e.target.checked;
            saveSettings();
            config.snowEnabled ? createSnowfall() : removeSnowfall();
        });
        panel.appendChild(createLabel('Enable Snowfall: ', snowCheckbox));

        const videoBgCheckbox = document.createElement('input');
        videoBgCheckbox.type = 'checkbox';
        videoBgCheckbox.checked = config.videoBackgroundEnabled;
        videoBgCheckbox.addEventListener('change', (e) => {
            config.videoBackgroundEnabled = e.target.checked;
            saveSettings();
            config.videoBackgroundEnabled ? setupVideoBackground() : removeVideoBackground();
        });
        panel.appendChild(createLabel('Enable Video BG: ', videoBgCheckbox));

        const mouseButtonSelect = document.createElement('select');
        const mouseOptions = [
            { value: 0, text: 'Left Button (0)' },
            { value: 1, text: 'Middle Button (1)' },
            { value: 2, text: 'Right Button (2)' }
        ];
        mouseOptions.forEach(opt => {
            const option = document.createElement('option');
            option.value = opt.value;
            option.textContent = opt.text;
            if (parseInt(opt.value, 10) === config.copyButtonMouse) option.selected = true;
            mouseButtonSelect.appendChild(option);
        });
        mouseButtonSelect.addEventListener('change', (e) => {
            config.copyButtonMouse = parseInt(e.target.value, 10);
            saveSettings();
        });
        panel.appendChild(createLabel('Copy Button: ', mouseButtonSelect));

        const themeSelect = document.createElement('select');
        const themeOptions = [
            { value: 'dark', text: 'Dark' },
            { value: 'light', text: 'Light' },
            { value: 'neon', text: 'Neon' },
            { value: 'pastel', text: 'Pastel' },
            { value: 'solarized', text: 'Solarized' },
            { value: 'monochrome', text: 'Monochrome' },
            { value: 'cyberpunk', text: 'Cyberpunk' },
            { value: 'forest', text: 'Forest' },
            { value: 'dusk', text: 'Dusk' },
            { value: 'stone', text: 'Stone' }
        ];
        themeOptions.forEach(opt => {
            const option = document.createElement('option');
            option.value = opt.value;
            option.textContent = opt.text;
            if (opt.value === config.theme) option.selected = true;
            themeSelect.appendChild(option);
        });
        themeSelect.addEventListener('change', (e) => {
            config.theme = e.target.value;
            saveSettings();
            applyTheme();
        });
        panel.appendChild(createLabel('Theme: ', themeSelect));

        const videoPlayerCheckbox = document.createElement('input');
        videoPlayerCheckbox.type = 'checkbox';
        videoPlayerCheckbox.checked = config.videoPlayerEnabled;
        videoPlayerCheckbox.addEventListener('change', (e) => {
            config.videoPlayerEnabled = e.target.checked;
            saveSettings();
            config.videoPlayerEnabled ? createVideoPlayer() : removeVideoPlayer();
        });
        panel.appendChild(createLabel('Enable Video Player: ', videoPlayerCheckbox));

        const videoPlayerUrlInput = document.createElement('input');
        videoPlayerUrlInput.type = 'text';
        videoPlayerUrlInput.value = config.videoPlayerUrl;
        videoPlayerUrlInput.placeholder = 'YouTube/Twitch URL';
        videoPlayerUrlInput.addEventListener('input', (e) => {
            config.videoPlayerUrl = e.target.value;
            saveSettings();
            if (config.videoPlayerEnabled) { removeVideoPlayer(); createVideoPlayer(); }
        });
        panel.appendChild(createLabel('Player URL: ', videoPlayerUrlInput));

        const videoPlayerTypeSelect = document.createElement('select');
        const playerTypes = [
            { value: 'youtube', text: 'YouTube' },
            { value: 'twitch', text: 'Twitch' }
        ];
        playerTypes.forEach(type => {
            const option = document.createElement('option');
            option.value = type.value;
            option.textContent = type.text;
            if (type.value === config.videoPlayerType) option.selected = true;
            videoPlayerTypeSelect.appendChild(option);
        });
        videoPlayerTypeSelect.addEventListener('change', (e) => {
            config.videoPlayerType = e.target.value;
            saveSettings();
            if (config.videoPlayerEnabled) { removeVideoPlayer(); createVideoPlayer(); }
        });
        panel.appendChild(createLabel('Player Type: ', videoPlayerTypeSelect));

        const cursorCheckbox = document.createElement('input');
        cursorCheckbox.type = 'checkbox';
        cursorCheckbox.checked = config.customCursorEnabled;
        cursorCheckbox.addEventListener('change', (e) => {
            config.customCursorEnabled = e.target.checked;
            saveSettings();
            applyCustomCursor();
        });
        panel.appendChild(createLabel('Custom Cursor: ', cursorCheckbox));

        const cursorStyleSelect = document.createElement('select');
        const cursorOptions = [
            { value: 'circle', text: 'Circle' },
            { value: 'star', text: 'Star' },
            { value: 'cross', text: 'Cross' }
        ];
        cursorOptions.forEach(opt => {
            const option = document.createElement('option');
            option.value = opt.value;
            option.textContent = opt.text;
            if (opt.value === config.cursorStyle) option.selected = true;
            cursorStyleSelect.appendChild(option);
        });
        cursorStyleSelect.addEventListener('change', (e) => {
            config.cursorStyle = e.target.value;
            saveSettings();
            applyCustomCursor();
        });
        panel.appendChild(createLabel('Cursor Style: ', cursorStyleSelect));

        const toggleButton = document.createElement('button');
        toggleButton.className = 'toggle-button';
        toggleButton.textContent = 'Rulik Mod 2.0';
        toggleButton.addEventListener('click', () => {
            if (panel.classList.contains('visible')) {
                panel.classList.remove('visible');
                panel.classList.add('hidden');
                setTimeout(() => toggleButton.textContent = 'Rulik Mod 2.0', 300);
            } else {
                panel.classList.remove('hidden');
                panel.classList.add('visible');
                setTimeout(() => toggleButton.textContent = 'Hide Settings', 300);
            }
        });

        document.addEventListener('click', (e) => {
            if (!panel.contains(e.target) && !toggleButton.contains(e.target) && panel.classList.contains('visible')) {
                panel.classList.remove('visible');
                panel.classList.add('hidden');
                toggleButton.textContent = 'Rulik Mod 2.0';
            }
        });

        let isDraggingPanel = false;
        let panelX, panelY;
        title.addEventListener('mousedown', (e) => {
            isDraggingPanel = true;
            panelX = e.clientX - parseInt(panel.style.left || 20);
            panelY = e.clientY - parseInt(panel.style.top || 20);
            title.style.cursor = 'grabbing';
            e.preventDefault();
        });
        document.addEventListener('mousemove', (e) => {
            if (!isDraggingPanel) return;
            let newX = e.clientX - panelX;
            let newY = e.clientY - panelY;
            newX = Math.max(0, Math.min(newX, window.innerWidth - panel.offsetWidth));
            newY = Math.max(0, Math.min(newY, window.innerHeight - panel.offsetHeight));
            panel.style.left = `${newX}px`;
            panel.style.top = `${newY}px`;
        });
        document.addEventListener('mouseup', () => {
            if (isDraggingPanel) {
                isDraggingPanel = false;
                title.style.cursor = 'grab';
            }
        });

        document.body.appendChild(toggleButton);
        document.body.appendChild(panel);
        applyTheme();
    };

    const createVideoPlayer = () => {
        if (!config.videoPlayerEnabled || !config.videoPlayerUrl) return;
        removeVideoPlayer();
        const container = document.createElement('div');
        container.id = 'video-player-container';
        Object.assign(container.style, {
            left: `${config.videoPlayerX}px`,
            top: `${config.videoPlayerY}px`,
            width: `${config.videoPlayerWidth}px`,
            height: `${config.videoPlayerHeight}px`
        });

        const player = document.createElement('iframe');
        if (config.videoPlayerType === 'youtube') {
            const videoId = config.videoPlayerUrl.split('v=')[1]?.split('&')[0] || config.videoPlayerUrl.split('/').pop();
            player.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&loop=1&controls=1`;
        } else if (config.videoPlayerType === 'twitch') {
            const channel = config.videoPlayerUrl.split('/').pop();
            player.src = `https://player.twitch.tv/?channel=${channel}&parent=${window.location.hostname}&autoplay=true`;
        }
        container.appendChild(player);

        const resizeHandle = document.createElement('div');
        resizeHandle.className = 'resize-handle';
        container.appendChild(resizeHandle);

        let isDraggingPlayer = false;
        let playerX, playerY;
        container.addEventListener('mousedown', (e) => {
            if (e.target === resizeHandle || e.target.tagName === 'IFRAME') return;
            isDraggingPlayer = true;
            playerX = e.clientX - config.videoPlayerX;
            playerY = e.clientY - config.videoPlayerY;
            container.style.cursor = 'grabbing';
            e.preventDefault();
        });
        document.addEventListener('mousemove', (e) => {
            if (!isDraggingPlayer) return;
            config.videoPlayerX = Math.max(0, Math.min(e.clientX - playerX, window.innerWidth - container.offsetWidth));
            config.videoPlayerY = Math.max(0, Math.min(e.clientY - playerY, window.innerHeight - container.offsetHeight));
            container.style.left = `${config.videoPlayerX}px`;
            container.style.top = `${config.videoPlayerY}px`;
            saveSettings();
        });
        document.addEventListener('mouseup', () => {
            if (isDraggingPlayer) {
                isDraggingPlayer = false;
                container.style.cursor = 'move';
            }
        });

        let isResizing = false;
        let startX, startY, startWidth, startHeight;
        resizeHandle.addEventListener('mousedown', (e) => {
            isResizing = true;
            startX = e.clientX;
            startY = e.clientY;
            startWidth = config.videoPlayerWidth;
            startHeight = config.videoPlayerHeight;
            e.preventDefault();
        });
        document.addEventListener('mousemove', (e) => {
            if (!isResizing) return;
            config.videoPlayerWidth = Math.max(100, startWidth + (e.clientX - startX));
            config.videoPlayerHeight = Math.max(56, startHeight + (e.clientY - startY));
            container.style.width = `${config.videoPlayerWidth}px`;
            container.style.height = `${config.videoPlayerHeight}px`;
            saveSettings();
        });
        document.addEventListener('mouseup', () => {
            if (isResizing) isResizing = false;
        });

        document.body.appendChild(container);
    };

    const removeVideoPlayer = () => {
        const container = document.getElementById('video-player-container');
        if (container) container.remove();
    };

    const applyCustomCursor = () => {
        document.body.style.cursor = config.customCursorEnabled ? 
            ({
                circle: 'url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' width=\'32\' height=\'32\'><circle cx=\'16\' cy=\'16\' r=\'10\' fill=\'red\'/></svg>") 16 16, auto',
                star: 'url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' width=\'32\' height=\'32\'><polygon points=\'16,2 20,12 30,12 22,20 24,30 16,24 8,30 10,20 2,12 12,12\' fill=\'yellow\'/></svg>") 16 16, auto',
                cross: 'url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' width=\'32\' height=\'32\'><line x1=\'8\' y1=\'8\' x2=\'24\' y2=\'24\' stroke=\'blue\' stroke-width=\'4\'/><line x1=\'24\' y1=\'8\' x2=\'8\' y2=\'24\' stroke=\'blue\' stroke-width=\'4\'/></svg>") 16 16, auto'
            }[config.cursorStyle] || 'auto') : 'auto';
    };

    const getRandomColor = () => {
        const letters = "0123456789ACDEF";
        let color;
        do {
            color = "#" + Array.from({ length: 6 }, () => letters[Math.floor(Math.random() * letters.length)]).join('');
        } while (isBlueColor(color));
        return color;
    };

    const isBlueColor = color => {
        const [, r, g, b] = color.match(/#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})/i) || [];
        return b && parseInt(b, 16) > parseInt(r, 16) && parseInt(b, 16) > parseInt(g, 16);
    };

    const addClickListener = button => {
        button.addEventListener('click', () => {
            button.style.backgroundColor = getRandomColor();
            button.disabled = true;
            button.style.opacity = '0.5';
            button.style.cursor = 'not-allowed';
            setTimeout(() => {
                button.disabled = false;
                button.style.opacity = '1';
                button.style.cursor = 'pointer';
            }, 3000);
        });
    };

    const observeDOMChanges = () => {
        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === 1 && node.classList.contains('form-block-buttons-submit')) {
                        addClickListener(node);
                    }
                });
            });
        });
        observer.observe(document.body, { childList: true, subtree: true });
    };

    const handleMiddleClickOnCopyButton = event => {
        if (event.button === config.copyButtonMouse) {
            navigator.clipboard.readText()
                .then(text => { if (text) window.open(`https://aladin-kiev.com/ua/search/?search=${encodeURIComponent(text)}`, '_blank'); })
                .catch(err => console.log('Clipboard error:', err));
        }
    };

    const addClickHandlerToAllCopyButtons = () => {
        document.querySelectorAll('.copy-button').forEach(button => {
            if (!button.dataset.listenerAdded) {
                button.addEventListener('mousedown', handleMiddleClickOnCopyButton);
                button.dataset.listenerAdded = 'true';
            }
        });
    };

    const setupVideoBackground = () => {
        if (!config.videoBackgroundEnabled || !config.videoUrl) return;
        removeVideoBackground();
        const video = document.createElement('video');
        Object.assign(video, { src: config.videoUrl, autoplay: true, loop: true, muted: true });
        Object.assign(video.style, { position: 'fixed', top: '0', left: '0', width: '100%', height: '100%', objectFit: 'cover', zIndex: '-1' });
        document.body.appendChild(video);
    };

    const removeVideoBackground = () => {
        const video = document.querySelector('video');
        if (video) video.remove();
    };

    const createSnowfall = () => {
        if (!config.snowEnabled) return;
        removeSnowfall();
        for (let i = 0; i < config.snowflakeCount; i++) {
            const snowflake = document.createElement('div');
            Object.assign(snowflake.style, {
                position: 'fixed',
                top: `${Math.random() * 100}vh`,
                left: `${Math.random() * 100}vw`,
                width: '10px',
                height: '10px',
                backgroundColor: config.snowflakeColor,
                borderRadius: '50%',
                opacity: Math.random(),
                zIndex: '9999',
                animation: `fall ${Math.random() * 5 + 5}s linear infinite`
            });
            snowflake.className = 'snowflake';
            document.body.appendChild(snowflake);
        }
        const style = document.createElement('style');
        style.innerHTML = '@keyframes fall { to { transform: translateY(100vh); } }';
        document.head.appendChild(style);
    };

    const removeSnowfall = () => {
        document.querySelectorAll('.snowflake').forEach(s => s.remove());
        const style = document.querySelector('style[innerHTML*="fall"]');
        if (style) style.remove();
    };

    const removeBracketsAndNumbers = event => {
        event.preventDefault();
        const selection = window.getSelection().toString();
        const modifiedText = selection.replace(/\[\d+\]|\(\d+\)/g, '');
        event.clipboardData.setData('text/plain', modifiedText);
    };
    document.addEventListener('copy', removeBracketsAndNumbers);

    const replaceChars = event => event.target.value = event.target.value.replace(/[\s,юб]/g, '.');

    const addEventListenerWithDelay = () => {
        const field = document.querySelector('#weight_1.form-shipment-store-table-left-row-control');
        if (field && !field.dataset.listenerAdded) {
            field.addEventListener('input', replaceChars);
            field.dataset.listenerAdded = 'true';
        }
    };

    const observerReplace = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            mutation.addedNodes.forEach(node => {
                if (node.nodeType === 1 && node.id === 'weight_1' && node.classList.contains('form-shipment-store-table-left-row-control')) {
                    addEventListenerWithDelay();
                }
            });
        });
    });
    observerReplace.observe(document.body, { childList: true, subtree: true });
    setInterval(addEventListenerWithDelay, 2000);

    const replaceInputValue = event => {
        let inputValue = event.target.value.trim().replace(/[їъ\]]/g, '');
        const correctBarcode = barcodeMap[inputValue];
        if (correctBarcode) {
            event.target.value = correctBarcode;
            ['input', 'keydown'].forEach(type => {
                const evt = type === 'input' 
                    ? new Event('input', { bubbles: true, cancelable: true })
                    : new KeyboardEvent('keydown', { bubbles: true, cancelable: true, key: 'Enter' });
                event.target.dispatchEvent(evt);
            });
        }
    };

    const debounce = (func, wait) => {
        let timeout;
        return (...args) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func(...args), wait);
        };
    };

    const replaceAndClearBarcode = debounce(() => {
        const barcodeInput = document.querySelector('#barcode.barcode-input');
        if (barcodeInput && barcodeInput.value) {
            let value = barcodeInput.value.trim().replace(/[їъ\]]/g, '');
            const correctBarcode = barcodeMap[value];
            if (correctBarcode) {
                barcodeInput.value = correctBarcode;
                ['input', 'keydown'].forEach(type => {
                    const evt = type === 'input' 
                        ? new Event('input', { bubbles: true, cancelable: true })
                        : new KeyboardEvent('keydown', { bubbles: true, cancelable: true, key: 'Enter' });
                    barcodeInput.dispatchEvent(evt);
                });
                setTimeout(() => { if (barcodeInput) barcodeInput.value = ''; }, 50);
            }
        }
    }, 250);

    setInterval(replaceAndClearBarcode, 250);
    const observerClearBarcode = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            if (mutation.type === 'childList') replaceAndClearBarcode();
        });
    });
    observerClearBarcode.observe(document.body, { childList: true, subtree: true });
    document.body.addEventListener('input', replaceInputValue);

    // Ініціалізація
    loadBarcodeMapFromGitHub().then(() => {
        document.body.style.backgroundImage = config.backgroundImageUrl ? `url("${config.backgroundImageUrl}")` : '';
        document.body.style.backgroundSize = 'cover';
        createSettingsPanel();
        if (config.videoBackgroundEnabled) setupVideoBackground();
        if (config.snowEnabled) createSnowfall();
        observeDOMChanges();
        addClickHandlerToAllCopyButtons();
        applyTheme();
        if (config.videoPlayerEnabled) createVideoPlayer();
        applyCustomCursor();

        const debouncedResize = debounce(() => {
            config.videoPlayerY = window.innerHeight - config.videoPlayerHeight - 20;
            if (config.videoPlayerEnabled) {
                removeVideoPlayer();
                createVideoPlayer();
            }
        }, 100);
        window.addEventListener('resize', debouncedResize);
    });
})();
