// ==UserScript==
// @name         Rulik Mod 2.0
// @namespace    http://tampermonkey.net/
// @version      1.7
// @description  Шось тут таке
// @author       Щоденник
// @match        *://disgusting.ivano-frankivsk.ua/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Default settings
    const defaultConfig = {
        videoUrl: 'https://cdn.pixabay.com/video/2020/04/09/35573-407595474_large.mp4',
        snowEnabled: false,
        videoBackgroundEnabled: true,
        snowflakeCount: 100,
        snowflakeColor: 'white',
        buttonSelector: '.form-block-buttons-submit',
        backgroundImageUrl: '',
        mouseButton: 1,
        theme: 'default'
    };

    const themes = {
        'default': { backgroundColor: '#f5f6f5', color: '#333333', accent: '#4a90e2' },
        'twilight': { backgroundColor: '#2e3440', color: '#d8dee9', accent: '#88c0d0' },
        'sandstone': { backgroundColor: '#e8d5b9', color: '#5a4633', accent: '#d08770' },
        'moss': { backgroundColor: '#d8e2dc', color: '#4a5a4a', accent: '#8ab07a' },
        'dusk': { backgroundColor: '#4a3f5e', color: '#e0d7e9', accent: '#b39ddb' },
        'pebble': { backgroundColor: '#d9d8d5', color: '#4f5052', accent: '#e57373' },
        'clay': { backgroundColor: '#c8a89a', color: '#3f2f2a', accent: '#f4a261' },
        'haze': { backgroundColor: '#e0e4e8', color: '#445566', accent: '#6b7280' },
        'olive': { backgroundColor: '#d9d7b6', color: '#5a5843', accent: '#a9b665' },
        'mist': { backgroundColor: '#e4e9e8', color: '#4a5e5e', accent: '#81a1c1' },
        'linen': { backgroundColor: '#f0e9e0', color: '#5a4f47', accent: '#d69d7e' },
        'sage': { backgroundColor: '#c9d3c5', color: '#4a524a', accent: '#a3be8c' }
    };

    // Fallback barcode map in case of fetch failure
    const fallbackBarcodeMap = {
    ']C17460304025002': '2100100137359', // arawak 180
    ']C17460309025002': '2100100137342',
    ']C17460313025002': '2100100137335',
    ']C17460302025002': '2100100137311',
    ']C17460318025002': '2100100137304',
    ']C17460320025002': '2100100137298',
    ']C17460311025002': '2100100137281',
    ']C17460312025002': '2100100137274',
    ']C17460310025002': '7460310025002',
    ']C17460305025002': '2100100136451',
    ']C17460306025002': '2100100136444',
    ']C17460327025002': '2100100135362',
    ']C17460317025002': '2100100135355',
    ']C17460319025002': '2100100135348',
    ']C17460323025002': '2100100133337',
    ']C17460303025002': '2100100133313',
    ']C17460316025002': '2100100133306',
    ']C17460301025002': '2100100133290',
    ']C17460324025002': '2100100133283',
    ']C17460326025002': '2100100133276',
    ']C17460325025002': '2100100133252',
    ']C17460314025002': '2100100133245',
    '4823456780564': '4823456780038', // mexico
    '4823456780533': '4823456780052', // lemon cake
    '7460330004002': '2100100188788',
    ']C17460309004002': '2100100187156',
    ']C17460313004002': '2100100137991',
    ']C17460322004002': '7460322004002',
    ']C17460311004002': '2100100137960',
    ']C17460312004002': '2100100137953',
    ']C17460307004002': '2100100137939',
    ']C17460327004002': '2100100137243',
    ']C17460306004002': '2100100136437',
    ']C17460308004002': '7460308004002',
    ']C17460305004002': '2100100136413',
    ']C17460310004002': '2100100136406',
    ']C17460303004002': '2100100133207',
    ']C17460315004002': '2100100133191',
    ']C17460316004002': '2100100133184',
    ']C17460323004002': '2100100133177',
    ']C17460325004002': '2100100133153',
    ']C17460314004002': '2100100133146',
    ']C10148930590000008': '2100100189440',
    ']C10148930580000001': '2100100189433',
    ']C10148930540000003': '2100100189426',
    ']C10132982920000003': '2100100180638',
    ']C10132982960000001': '2100100180621',
    ']C10165988930000000': '2100100180607',
    ']C10132981540000004': '2100100180560',
    ']C10132981960000004': '2100100180553',
    ']C10122988920000008': '2100100180546',
    ']C10165988970000008': '2100100180515',
    ']C10164988940000008': '2100100180485',
    ']C10132981710000001': '2100100180478',
    ']C10132981170000009': '2100100180782',
    ']C10192988920000007': '2100100180720',
    ']C10165988990000002': '2100100180652',
    ']C10132981610000002': '2100100180751',
    ']C10132981940000000': '2100100187781',
    ']C10132981690000008': '2100100180775',
    ']C10184729275716004': '2100100196417',
    ']C10184729274732005': '2100100196882',
    ']C10132981870000002': '2100100196639',
    ']C10184729274734009': '2100100196622',
    ']C10184729275727000': '2100100196615',
    ']C10184729275713003': '2100100196608',
    ']C10184729275721008': '2100100196585',
    ']C10184729275726003': '2100100196578',
    ']C10132983920000000': '2100100196561',
    ']C10132981890000006': '2100100196554',
    ']C10132981930000003': '2100100196516',
    ']C10132981860000005': '2100100196509',
    ']C10132981980000008': '2100100196493',
    ']C10132982950000004': '2100100196486',
    ']C10132983940000004': '2100100196479',
    ']C10132983910000003': '2100100196462',
    ']C10132982940000007': '2100100196424',
    '8991475068232': '2100100107567'
};

    let barcodeMap = fallbackBarcodeMap; // Default to fallback

    // Fetch barcode map from GitHub
    fetch('https://raw.githubusercontent.com/1stMaverick/ProgramaFixer/refs/heads/main/barcodes.json')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            barcodeMap = data; // Update barcodeMap with fetched data
            console.log('Barcode map successfully loaded from GitHub:', barcodeMap);
        })
        .catch(error => {
            console.error('Failed to load barcode map from GitHub, using fallback:', error);
            barcodeMap = fallbackBarcodeMap; // Ensure fallback is used on error
        });

    document.addEventListener('dblclick', function(event) {
        if (event.target.classList.contains('vs__selected')) {
            if (event.target.style.textDecoration === 'line-through' && event.target.style.color === 'red') {
                event.target.style.textDecoration = 'none';
                event.target.style.color = '';
            } else if (event.target.style.textDecoration === 'line-through') {
                event.target.style.color = 'red';
            } else {
                event.target.style.textDecoration = 'line-through';
                event.target.style.color = '';
            }
        }
    });

    let config = JSON.parse(localStorage.getItem('userSettings')) || defaultConfig;

    function saveSettings() {
        localStorage.setItem('userSettings', JSON.stringify(config));
    }

    function applyTheme() {
        const selectedTheme = themes[config.theme] || themes['default'];
        document.body.style.backgroundColor = selectedTheme.backgroundColor;
        document.body.style.color = selectedTheme.color;
        document.querySelectorAll('button, a').forEach(el => {
            el.style.color = selectedTheme.accent;
        });
        if (config.backgroundImageUrl) {
            document.body.style.backgroundImage = `url("${config.backgroundImageUrl}")`;
            document.body.style.backgroundSize = 'cover';
        }
    }

    function createSettingsPanel() {
        const panel = document.createElement('div');
        panel.style.position = 'fixed';
        panel.style.top = '20px';
        panel.style.left = '20px';
        panel.style.background = 'linear-gradient(145deg, #1e272e, #2f3640)';
        panel.style.color = '#dfe6e9';
        panel.style.padding = '30px';
        panel.style.borderRadius = '15px';
        panel.style.boxShadow = '0 10px 20px rgba(0, 0, 0, 0.4), inset 0 0 10px rgba(255, 255, 255, 0.05)';
        panel.style.zIndex = '9999';
        panel.style.fontFamily = "'Segoe UI', Arial, sans-serif";
        panel.style.width = '320px';
        panel.style.backdropFilter = 'blur(8px)';
        panel.style.border = '1px solid rgba(255, 255, 255, 0.15)';
        panel.style.display = 'none';
        panel.style.opacity = '0';
        panel.style.transform = 'translateY(-20px)';
        panel.style.transition = 'opacity 0.3s ease, transform 0.3s ease';

        const title = document.createElement('h2');
        title.textContent = 'Rulik Mod 2.0';
        title.style.textAlign = 'center';
        title.style.margin = '0 0 30px 0';
        title.style.fontSize = '24px';
        title.style.fontWeight = '700';
        title.style.textTransform = 'uppercase';
        title.style.letterSpacing = '2px';
        title.style.color = '#00cec9';
        title.style.textShadow = '0 2px 4px rgba(0, 206, 201, 0.3)';
        panel.appendChild(title);

        function styleInput(input) {
            input.style.width = '100%';
            input.style.padding = '10px 15px';
            input.style.margin = '8px 0 20px 0';
            input.style.border = 'none';
            input.style.borderRadius = '8px';
            input.style.background = 'rgba(255, 255, 255, 0.08)';
            input.style.color = '#dfe6e9';
            input.style.fontSize = '15px';
            input.style.boxSizing = 'border-box';
            input.style.boxShadow = 'inset 0 2px 4px rgba(0, 0, 0, 0.2)';
            input.style.transition = 'all 0.3s ease';
            input.placeholder = input.placeholder;
            input.addEventListener('focus', () => {
                input.style.background = 'rgba(255, 255, 255, 0.15)';
                input.style.boxShadow = '0 0 10px rgba(0, 206, 201, 0.5)';
            });
            input.addEventListener('blur', () => {
                input.style.background = 'rgba(255, 255, 255, 0.08)';
                input.style.boxShadow = 'inset 0 2px 4px rgba(0, 0, 0, 0.2)';
            });
        }

        const videoUrlInput = document.createElement('input');
        videoUrlInput.type = 'text';
        videoUrlInput.value = config.videoUrl;
        videoUrlInput.placeholder = 'Video URL';
        styleInput(videoUrlInput);
        videoUrlInput.addEventListener('input', () => {
            config.videoUrl = videoUrlInput.value;
            saveSettings();
        });
        panel.appendChild(document.createElement('label')).textContent = 'Video URL:';
        panel.appendChild(videoUrlInput);

        const bgUrlInput = document.createElement('input');
        bgUrlInput.type = 'text';
        bgUrlInput.value = config.backgroundImageUrl;
        bgUrlInput.placeholder = 'Background Image URL';
        styleInput(bgUrlInput);
        bgUrlInput.addEventListener('input', () => {
            config.backgroundImageUrl = bgUrlInput.value;
            saveSettings();
            applyTheme();
        });
        panel.appendChild(document.createElement('label')).textContent = 'Background Image URL:';
        panel.appendChild(bgUrlInput);

        function styleCheckboxWrapper(checkbox, labelText) {
            const wrapper = document.createElement('div');
            wrapper.style.display = 'flex';
            wrapper.style.alignItems = 'center';
            wrapper.style.margin = '15px 0';
            wrapper.style.padding = '8px';
            wrapper.style.borderRadius = '6px';
            wrapper.style.background = 'rgba(255, 255, 255, 0.05)';
            wrapper.style.transition = 'background 0.3s ease';

            checkbox.style.marginRight = '12px';
            checkbox.style.accentColor = '#00cec9';
            checkbox.style.transform = 'scale(1.3)';
            checkbox.style.cursor = 'pointer';

            const label = document.createElement('span');
            label.textContent = labelText;
            label.style.fontSize = '15px';
            label.style.cursor = 'pointer';
            label.style.flex = '1';

            wrapper.appendChild(checkbox);
            wrapper.appendChild(label);
            wrapper.addEventListener('mouseover', () => wrapper.style.background = 'rgba(255, 255, 255, 0.1)');
            wrapper.addEventListener('mouseout', () => wrapper.style.background = 'rgba(255, 255, 255, 0.05)');
            return wrapper;
        }

        const snowCheckbox = document.createElement('input');
        snowCheckbox.type = 'checkbox';
        snowCheckbox.checked = config.snowEnabled;
        snowCheckbox.addEventListener('change', () => {
            config.snowEnabled = snowCheckbox.checked;
            saveSettings();
            if (config.snowEnabled) createSnowfall(); else removeSnowfall();
        });
        panel.appendChild(styleCheckboxWrapper(snowCheckbox, 'Enable Snowfall'));

        const videoBgCheckbox = document.createElement('input');
        videoBgCheckbox.type = 'checkbox';
        videoBgCheckbox.checked = config.videoBackgroundEnabled;
        videoBgCheckbox.addEventListener('change', () => {
            config.videoBackgroundEnabled = videoBgCheckbox.checked;
            saveSettings();
            if (config.videoBackgroundEnabled) setupVideoBackground(); else removeVideoBackground();
        });
        panel.appendChild(styleCheckboxWrapper(videoBgCheckbox, 'Enable Video Background'));

        const mouseButtonLabel = document.createElement('label');
        mouseButtonLabel.textContent = 'Mouse Button for Copy Action:';
        mouseButtonLabel.style.display = 'block';
        mouseButtonLabel.style.marginBottom = '8px';
        panel.appendChild(mouseButtonLabel);

        const mouseButtonSelect = document.createElement('select');
        mouseButtonSelect.style.width = '100%';
        mouseButtonSelect.style.padding = '10px 15px';
        mouseButtonSelect.style.margin = '0 0 20px 0';
        mouseButtonSelect.style.border = 'none';
        mouseButtonSelect.style.borderRadius = '8px';
        mouseButtonSelect.style.background = 'rgba(255, 255, 255, 0.08)';
        mouseButtonSelect.style.color = '#dfe6e9';
        mouseButtonSelect.style.fontSize = '15px';
        mouseButtonSelect.style.boxSizing = 'border-box';
        mouseButtonSelect.style.boxShadow = 'inset 0 2px 4px rgba(0, 0, 0, 0.2)';
        mouseButtonSelect.style.transition = 'all 0.3s ease';
        mouseButtonSelect.addEventListener('focus', () => {
            mouseButtonSelect.style.background = 'rgba(255, 255, 255, 0.15)';
            mouseButtonSelect.style.boxShadow = '0 0 10px rgba(0, 206, 201, 0.5)';
        });
        mouseButtonSelect.addEventListener('blur', () => {
            mouseButtonSelect.style.background = 'rgba(255, 255, 255, 0.08)';
            mouseButtonSelect.style.boxShadow = 'inset 0 2px 4px rgba(0, 0, 0, 0.2)';
        });

        const mouseOptions = [
            { value: 0, text: 'Left Button' },
            { value: 1, text: 'Middle Button' },
            { value: 2, text: 'Right Button' }
        ];

        mouseOptions.forEach(opt => {
            const option = document.createElement('option');
            option.value = opt.value;
            option.textContent = opt.text;
            if (opt.value === config.mouseButton) option.selected = true;
            mouseButtonSelect.appendChild(option);
        });

        mouseButtonSelect.addEventListener('change', () => {
            config.mouseButton = parseInt(mouseButtonSelect.value, 10);
            saveSettings();
        });
        panel.appendChild(mouseButtonSelect);

        const themeLabel = document.createElement('label');
        themeLabel.textContent = 'Site Theme:';
        themeLabel.style.display = 'block';
        themeLabel.style.marginBottom = '8px';
        panel.appendChild(themeLabel);

        const themeSelect = document.createElement('select');
        themeSelect.style.width = '100%';
        themeSelect.style.padding = '10px 15px';
        themeSelect.style.margin = '0 0 20px 0';
        themeSelect.style.border = 'none';
        themeSelect.style.borderRadius = '8px';
        themeSelect.style.background = 'rgba(255, 255, 255, 0.08)';
        themeSelect.style.color = '#dfe6e9';
        themeSelect.style.fontSize = '15px';
        themeSelect.style.boxSizing = 'border-box';
        themeSelect.style.boxShadow = 'inset 0 2px 4px rgba(0, 0, 0, 0.2)';
        themeSelect.style.transition = 'all 0.3s ease';
        themeSelect.addEventListener('focus', () => {
            themeSelect.style.background = 'rgba(255, 255, 255, 0.15)';
            themeSelect.style.boxShadow = '0 0 10px rgba(0, 206, 201, 0.5)';
        });
        themeSelect.addEventListener('blur', () => {
            themeSelect.style.background = 'rgba(255, 255, 255, 0.08)';
            themeSelect.style.boxShadow = 'inset 0 2px 4px rgba(0, 0, 0, 0.2)';
        });

        const themeOptions = [
            { value: 'default', text: 'Default' },
            { value: 'twilight', text: 'Twilight' },
            { value: 'sandstone', text: 'Sandstone' },
            { value: 'moss', text: 'Moss' },
            { value: 'dusk', text: 'Dusk' },
            { value: 'pebble', text: 'Pebble' },
            { value: 'clay', text: 'Clay' },
            { value: 'haze', text: 'Haze' },
            { value: 'olive', text: 'Olive' },
            { value: 'mist', text: 'Mist' },
            { value: 'linen', text: 'Linen' },
            { value: 'sage', text: 'Sage' }
        ];

        themeOptions.forEach(opt => {
            const option = document.createElement('option');
            option.value = opt.value;
            option.textContent = opt.text;
            if (opt.value === config.theme) option.selected = true;
            themeSelect.appendChild(option);
        });

        themeSelect.addEventListener('change', () => {
            config.theme = themeSelect.value;
            saveSettings();
            applyTheme();
        });
        panel.appendChild(themeSelect);

        const toggleButton = document.createElement('button');
        toggleButton.textContent = 'Rulik Mod';
        toggleButton.style.position = 'fixed';
        toggleButton.style.bottom = '20px';
        toggleButton.style.right = '20px';
        toggleButton.style.zIndex = '9999';
        toggleButton.style.padding = '12px 25px';
        toggleButton.style.background = 'linear-gradient(145deg, #00cec9, #0984e3)';
        toggleButton.style.color = '#fff';
        toggleButton.style.border = 'none';
        toggleButton.style.borderRadius = '10px';
        toggleButton.style.cursor = 'pointer';
        toggleButton.style.fontSize = '16px';
        toggleButton.style.fontWeight = '600';
        toggleButton.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.3)';
        toggleButton.style.transition = 'all 0.3s ease';
        toggleButton.addEventListener('mouseover', () => {
            toggleButton.style.transform = 'translateY(-2px)';
            toggleButton.style.boxShadow = '0 8px 16px rgba(0, 206, 201, 0.5)';
        });
        toggleButton.addEventListener('mouseout', () => {
            toggleButton.style.transform = 'translateY(0)';
            toggleButton.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.3)';
        });
        toggleButton.addEventListener('click', () => {
            if (panel.style.display === 'none') {
                panel.style.display = 'block';
                setTimeout(() => {
                    panel.style.opacity = '1';
                    panel.style.transform = 'translateY(0)';
                }, 10);
                toggleButton.textContent = 'Hide Settings';
            } else {
                panel.style.opacity = '0';
                panel.style.transform = 'translateY(-20px)';
                setTimeout(() => panel.style.display = 'none', 300);
                toggleButton.textContent = 'Rulik Mod';
            }
        });

        document.body.appendChild(toggleButton);
        document.body.appendChild(panel);
    }

    function getRandomColor() {
        const letters = "0123456789ACDEF";
        let color;
        do {
            color = "#";
            for (let i = 0; i < 6; i++) color += letters[Math.floor(Math.random() * letters.length)];
        } while (isBlueColor(color));
        return color;
    }

    function isBlueColor(color) {
        const blueRegex = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})/i;
        const match = blueRegex.exec(color);
        if (match) {
            const r = parseInt(match[1], 16);
            const g = parseInt(match[2], 16);
            const b = parseInt(match[3], 16);
            return b > r && b > g;
        }
        return false;
    }

    function addClickListener(button) {
        button.addEventListener('click', () => button.style.backgroundColor = getRandomColor());
    }

    function observeDOMChanges() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.addedNodes.length) {
                    mutation.addedNodes.forEach((node) => {
                        if (node.classList && node.classList.contains('form-block-buttons-submit')) addClickListener(node);
                    });
                }
            });
        });
        observer.observe(document.body, { childList: true, subtree: true });
    }

    observeDOMChanges();

    function handleMiddleClickOnCopyButton(event) {
        if (event.button === config.mouseButton) {
            navigator.clipboard.readText().then(text => {
                if (text) {
                    const searchUrl = `https://aladin-kiev.com/ua/search/?search=${encodeURIComponent(text)}`;
                    window.open(searchUrl, '_blank');
                    console.log(`Открыта новая вкладка с поиском: ${text}`);
                }
            }).catch(err => console.log('Ошибка буфера обмена:', err));
        }
    }

    function addClickHandlerToAllCopyButtons() {
        const copyButtons = document.querySelectorAll('.copy-button');
        copyButtons.forEach(button => {
            if (!button.dataset.listenerAdded) {
                button.addEventListener('mousedown', handleMiddleClickOnCopyButton);
                button.dataset.listenerAdded = "true";
            }
        });
    }

    const observer = new MutationObserver(() => addClickHandlerToAllCopyButtons());
    observer.observe(document.body, { childList: true, subtree: true });
    addClickHandlerToAllCopyButtons();

    function setupVideoBackground() {
        if (config.videoBackgroundEnabled) {
            const video = document.createElement('video');
            video.src = config.videoUrl;
            video.autoplay = true;
            video.loop = true;
            video.muted = true;
            video.style.position = 'fixed';
            video.style.top = '0';
            video.style.left = '0';
            video.style.width = '100%';
            video.style.height = '100%';
            video.style.objectFit = 'cover';
            video.style.zIndex = '-1';
            document.body.appendChild(video);
        }
    }

    function removeVideoBackground() {
        const video = document.querySelector('video');
        if (video) video.remove();
    }

    function createSnowfall() {
        if (config.snowEnabled) {
            for (let i = 0; i < config.snowflakeCount; i++) {
                const snowflake = document.createElement('div');
                snowflake.className = 'snowflake';
                snowflake.style.position = 'fixed';
                snowflake.style.top = `${Math.random() * 100}vh`;
                snowflake.style.left = `${Math.random() * 100}vw`;
                snowflake.style.width = '10px';
                snowflake.style.height = '10px';
                snowflake.style.backgroundColor = config.snowflakeColor;
                snowflake.style.borderRadius = '50%';
                snowflake.style.opacity = Math.random();
                snowflake.style.zIndex = '9999';
                snowflake.style.animation = `fall ${Math.random() * 5 + 5}s linear infinite`;
                document.body.appendChild(snowflake);
            }
            const style = document.createElement('style');
            style.innerHTML = `@keyframes fall { to { transform: translateY(100vh); } }`;
            document.head.appendChild(style);
        }
    }

    function removeSnowfall() {
        document.querySelectorAll('.snowflake').forEach(snowflake => snowflake.remove());
    }

    function removeBracketsAndNumbers(event) {
        event.preventDefault();
        const selection = window.getSelection().toString();
        const modifiedText = selection.replace(/\[\d+\]|\(\d+\)/g, '');
        event.clipboardData.setData('text/plain', modifiedText);
    }

    function replaceChars(event) {
        event.target.value = event.target.value.replace(/[\s,юб]/g, '.');
    }

    function addEventListenerWithDelay() {
        const field = document.querySelector('#weight_1.form-shipment-store-table-left-row-control');
        if (field) field.addEventListener('input', replaceChars);
    }

    const observerReplace = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
                if (node.id === 'weight_1' && node.classList.contains('form-shipment-store-table-left-row-control')) {
                    addEventListenerWithDelay();
                }
            });
        });
    });

    observerReplace.observe(document.body, { childList: true, subtree: true });
    setInterval(addEventListenerWithDelay, 2000);
    document.addEventListener('copy', removeBracketsAndNumbers);

    function replaceInputValue(event) {
        let inputValue = event.target.value.trim();
        const correctBarcode = barcodeMap[inputValue];
        if (correctBarcode) {
            event.target.value = correctBarcode;
            const inputEvent = new Event('input', { bubbles: true, cancelable: true });
            event.target.dispatchEvent(inputEvent);
            const enterEvent = new KeyboardEvent('keydown', { bubbles: true, cancelable: true, key: 'Enter' });
            event.target.dispatchEvent(enterEvent);
        }
    }

    function replaceAndClearBarcode() {
        const barcodeInput = document.querySelector('#barcode.barcode-input');
        if (barcodeInput && barcodeInput.value) {
            const value = barcodeInput.value.trim();
            const correctBarcode = barcodeMap[value];
            if (correctBarcode) {
                barcodeInput.value = correctBarcode;
                const inputEvent = new Event('input', { bubbles: true, cancelable: true });
                barcodeInput.dispatchEvent(inputEvent);
                const enterEvent = new KeyboardEvent('keydown', { bubbles: true, cancelable: true, key: 'Enter' });
                barcodeInput.dispatchEvent(enterEvent);
            }
            setTimeout(() => barcodeInput.value = '', 5);
        }
    }

    const observerClearBarcode = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') replaceAndClearBarcode();
        });
    });

    observerClearBarcode.observe(document.body, { childList: true, subtree: true });
    document.body.addEventListener('input', replaceInputValue);

    createSettingsPanel();
    applyTheme();
    setupVideoBackground();
    if (config.snowEnabled) createSnowfall();
})();
