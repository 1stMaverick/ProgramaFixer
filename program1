// ==UserScript==
// @name         Rulik Mod 2.0
// @namespace    http://tampermonkey.net/
// @version      1.9.1
// @description  Фіксииииии з GitHub баркодами та всіма темами
// @author       You
// @match        *://disgusting.ivano-frankivsk.ua/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Початкове визначення barcodeMap як порожнього об'єкта
    let barcodeMap = {};

    // Завантаження barcodeMap з GitHub
    async function loadBarcodeMapFromGitHub() {
        try {
            const url = 'https://raw.githubusercontent.com/1stMaverick/ProgramaFixer/refs/heads/main/barcodes.json';
            const response = await fetch(url);
            if (!response.ok) throw new Error('Не вдалося завантажити barcodes.json');
            const data = await response.json();
            barcodeMap = data;
            console.log('barcodeMap завантажено з GitHub:', barcodeMap);
        } catch (error) {
            console.error('Помилка завантаження barcodeMap:', error);
            barcodeMap = { ']C17460304025002': '2100100137359', '8991475068232': '2100100107567' }; // Fallback
        }
    }

    // Конфігурація за замовчуванням
    const defaultConfig = {
        videoUrl: 'https://cdn.pixabay.com/video/2020/04/09/35573-407595474_large.mp4',
        snowEnabled: false,
        videoBackgroundEnabled: true,
        snowflakeCount: 100,
        snowflakeColor: 'white',
        buttonSelector: '.form-block-buttons-submit',
        backgroundImageUrl: '',
        copyButtonMouse: 1,
        theme: 'dark',
        videoPlayerEnabled: false,
        videoPlayerUrl: '',
        videoPlayerType: 'youtube',
        customCursorEnabled: false,
        cursorStyle: 'circle',
        videoPlayerWidth: 300,
        videoPlayerHeight: 169,
        videoPlayerX: 20,
        videoPlayerY: window.innerHeight - 189
    };

    let config = JSON.parse(localStorage.getItem('userSettings')) || defaultConfig;
    const saveSettings = () => localStorage.setItem('userSettings', JSON.stringify(config));

    // Повернення всіх тем
    const applyTheme = () => {
        const themes = {
            dark: { body: { backgroundColor: '#2c3e50', color: '#ecf0f1' }, panel: { background: 'linear-gradient(135deg, #2c3e50, #34495e)', color: '#ecf0f1' }, inputs: { background: '#ecf0f1', color: '#2c3e50' }, hover: { color: '#3498db' } },
            light: { body: { backgroundColor: '#ecf0f1', color: '#2c3e50' }, panel: { background: 'linear-gradient(135deg, #ecf0f1, #dfe6e9)', color: '#2c3e50' }, inputs: { background: '#34495e', color: '#ecf0f1' }, hover: { color: '#e74c3c' } },
            neon: { body: { backgroundColor: '#1a1a1a', color: '#00ffcc' }, panel: { background: 'linear-gradient(135deg, #1a1a1a, #333333)', color: '#00ffcc' }, inputs: { background: '#00ffcc', color: '#1a1a1a' }, hover: { color: '#ff00ff' } },
            pastel: { body: { backgroundColor: '#f7e7ce', color: '#6b5b95' }, panel: { background: 'linear-gradient(135deg, #f7e7ce, #d5c6e0)', color: '#6b5b95' }, inputs: { background: '#fff0f5', color: '#6b5b95' }, hover: { color: '#ff6f61' } },
            solarized: { body: { backgroundColor: '#002b36', color: '#93a1a1' }, panel: { background: 'linear-gradient(135deg, #002b36, #073642)', color: '#93a1a1' }, inputs: { background: '#fdf6e3', color: '#657b83' }, hover: { color: '#b58900' } },
            monochrome: { body: { backgroundColor: '#333333', color: '#cccccc' }, panel: { background: 'linear-gradient(135deg, #333333, #555555)', color: '#cccccc' }, inputs: { background: '#ffffff', color: '#333333' }, hover: { color: '#999999' } },
            cyberpunk: { body: { backgroundColor: '#0d0d0d', color: '#ff00ff' }, panel: { background: 'linear-gradient(135deg, #0d0d0d, #1a1a1a)', color: '#ff00ff' }, inputs: { background: '#00ffff', color: '#0d0d0d' }, hover: { color: '#00ffff' } },
            forest: { body: { backgroundColor: '#1b2f2a', color: '#d4e4d9' }, panel: { background: 'linear-gradient(135deg, #1b2f2a, #2e4f47)', color: '#d4e4d9' }, inputs: { background: '#d4e4d9', color: '#1b2f2a' }, hover: { color: '#8bc34a' } },
            dusk: { body: { backgroundColor: '#3e3e5e', color: '#b8b8d1' }, panel: { background: 'linear-gradient(135deg, #3e3e5e, #4a4a78)', color: '#b8b8d1' }, inputs: { background: '#b8b8d1', color: '#3e3e5e' }, hover: { color: '#7e7eb8' } },
            stone: { body: { backgroundColor: '#4a4a4a', color: '#d9d9d9' }, panel: { background: 'linear-gradient(135deg, #4a4a4a, #5e5e5e)', color: '#d9d9d9' }, inputs: { background: '#d9d9d9', color: '#4a4a4a' }, hover: { color: '#a8a8a8' } }
        };

        const selectedTheme = themes[config.theme] || themes.dark;
        const body = document.body;
        body.style.transition = 'background-color 0.5s ease, color 0.5s ease';
        Object.assign(body.style, selectedTheme.body);

        const panel = document.querySelector('.settings-panel');
        if (panel) {
            panel.style.transition = 'background 0.5s ease, color 0.5s ease';
            Object.assign(panel.style, selectedTheme.panel);
            const inputs = panel.querySelectorAll('input[type="text"], select');
            inputs.forEach(input => {
                input.style.transition = 'background 0.5s ease, color 0.5s ease';
                Object.assign(input.style, selectedTheme.inputs);
            });
            const labels = panel.querySelectorAll('label');
            labels.forEach(label => {
                label.style.transition = 'color 0.5s ease';
                label.style.color = selectedTheme.body.color;
            });
        }

        setTimeout(() => {
            body.style.transition = '';
            if (panel) {
                panel.style.transition = '';
                inputs.forEach(input => input.style.transition = '');
                labels.forEach(label => label.style.transition = '');
            }
        }, 500);
    };

    const createSettingsPanel = () => {
        const styleSheet = document.createElement('style');
        styleSheet.innerHTML = `
            .settings-panel { position: fixed; top: 20px; left: 20px; padding: 20px; border-radius: 12px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); z-index: 9999; font-family: Arial, sans-serif; width: 300px; opacity: 0; transform: translateY(-20px); transition: opacity 0.3s ease, transform 0.3s ease; cursor: move; pointer-events: auto; }
            .settings-panel.visible { opacity: 1; transform: translateY(0); }
            .settings-panel.hidden { opacity: 0; pointer-events: none; }
            .settings-panel h2 { margin: 0 0 20px; text-align: center; font-size: 22px; text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); cursor: grab; }
            .settings-panel label { display: flex; align-items: center; margin-bottom: 15px; font-size: 14px; cursor: pointer; transition: color 0.2s ease; }
            .settings-panel input[type="text"], .settings-panel select { width: 100%; padding: 8px; margin-left: 10px; border: none; border-radius: 6px; font-size: 12px; box-sizing: border-box; }
            .settings-panel input[type="checkbox"] { margin-left: 10px; transform: scale(1.2); }
            .toggle-button { position: fixed; top: 900px; right: 20px; z-index: 9999; padding: 10px 20px; background: linear-gradient(135deg, #3498db, #2980b9); color: #ecf0f1; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s ease, box-shadow 0.2s ease; }
            .toggle-button:hover { transform: translateY(-2px); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3); }
            .toggle-button:active { transform: translateY(0); box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); }
            #video-player-container { position: fixed; z-index: 9998; border: 2px solid #ccc; border-radius: 5px; background: rgba(0, 0, 0, 0.5); cursor: move; }
            #video-player-container iframe { width: 100%; height: 100%; border: none; pointer-events: auto; }
            #video-player-container .resize-handle { position: absolute; bottom: -5px; right: -5px; width: 10px; height: 10px; background: #fff; border: 1px solid #000; cursor: nwse-resize; }
        `;
        document.head.appendChild(styleSheet);

        const panel = document.createElement('div');
        panel.className = 'settings-panel hidden';
        const title = document.createElement('h2');
        title.textContent = 'Rulik Mod 2.0 Settings';
        panel.appendChild(title);

        const createLabel = (text, input) => {
            const label = document.createElement('label');
            label.textContent = text;
            label.appendChild(input);
            return label;
        };

        const videoUrlInput = document.createElement('input');
        videoUrlInput.type = 'text';
        videoUrlInput.value = config.videoUrl;
        videoUrlInput.placeholder = 'Background Video URL';
        videoUrlInput.addEventListener('input', (e) => {
            config.videoUrl = e.target.value;
            saveSettings();
            if (config.videoBackgroundEnabled) { removeVideoBackground(); setupVideoBackground(); }
        });
        panel.appendChild(createLabel('BG Video URL: ', videoUrlInput));

        const bgUrlInput = document.createElement('input');
        bgUrlInput.type = 'text';
        bgUrlInput.value = config.backgroundImageUrl;
        bgUrlInput.placeholder = 'Background Image URL';
        bgUrlInput.addEventListener('input', (e) => {
            config.backgroundImageUrl = e.target.value;
            saveSettings();
            document.body.style.backgroundImage = config.backgroundImageUrl ? `url("${config.backgroundImageUrl}")` : '';
        });
        panel.appendChild(createLabel('Background URL: ', bgUrlInput));

        const snowCheckbox = document.createElement('input');
        snowCheckbox.type = 'checkbox';
        snowCheckbox.checked = config.snowEnabled;
        snowCheckbox.addEventListener('change', (e) => {
            config.snowEnabled = e.target.checked;
            saveSettings();
            config.snowEnabled ? createSnowfall() : removeSnowfall();
        });
       
