// ==UserScript==
// @name         Rulik Mod 2.0
// @namespace    http://tampermonkey.net/
// @version      1.4
// @description  Фіксииииии
// @author       You
// @match        *://disgusting.ivano-frankivsk.ua/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Default settings
    const defaultConfig = {
        videoUrl: 'https://cdn.pixabay.com/video/2020/04/09/35573-407595474_large.mp4',
        snowEnabled: false,
        videoBackgroundEnabled: true,
        snowflakeCount: 100,
        snowflakeColor: 'white',
        buttonSelector: '.form-block-buttons-submit',
        backgroundImageUrl: ''
    };

   document.addEventListener('dblclick', function(event) {
        if (event.target.classList.contains('vs__selected')) {
            if (event.target.style.textDecoration === 'line-through' && event.target.style.color === 'red') {
                event.target.style.textDecoration = 'none';
                event.target.style.color = '';
            } else if (event.target.style.textDecoration === 'line-through') {
                event.target.style.color = 'red';
            } else {
                event.target.style.textDecoration = 'line-through';
                event.target.style.color = '';
            }
        }
    });
    // Load saved settings from localStorage or use default settings
    let config = JSON.parse(localStorage.getItem('userSettings')) || defaultConfig;

    // Function to save settings to localStorage
    function saveSettings() {
        localStorage.setItem('userSettings', JSON.stringify(config));
    }
// Change background periodically for Rulikmod
    let backgroundChangeIntervalId = null;
    function startRulikMod() {
        if (backgroundChangeIntervalId) clearInterval(backgroundChangeIntervalId);

        backgroundChangeIntervalId = setInterval(() => {
            const newBackground = `https://picsum.photos/1920/1080?random=${Date.now().png}`;
            document.body.style.backgroundImage = `url("${newBackground}")`;
            document.body.style.backgroundSize = 'cover';
        }, config.backgroundChangeInterval);

        console.log('Rulikmod activated: Background will change every 30 minutes.');
    }

    function stopRulikMod() {
        if (backgroundChangeIntervalId) {
            clearInterval(backgroundChangeIntervalId);
            backgroundChangeIntervalId = null;
        }
        document.body.style.backgroundImage = `url("${config.backgroundImageUrl}")`;
        document.body.style.backgroundSize = 'cover';
        console.log('Rulikmod deactivated.');
    }
    // Create settings panel
    function createSettingsPanel() {
        const panel = document.createElement('div');
        panel.style.position = 'fixed';
        panel.style.top = '10px';
        panel.style.left = '10px';
        panel.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        panel.style.color = 'white';
        panel.style.padding = '20px';
        panel.style.borderRadius = '8px';
        panel.style.zIndex = '9999';
        panel.style.fontSize = '14px';
        panel.style.display = 'none'; // Start hidden

        // Title (Centered Text)
        const title = document.createElement('h2');
        title.textContent = 'Настройки Rulik Mod';
        title.style.textAlign = 'center';
        title.style.marginBottom = '20px'; // Space below the title
        panel.appendChild(title);

        // Video URL input
        const videoUrlInput = document.createElement('input');
        videoUrlInput.type = 'text';
        videoUrlInput.value = config.videoUrl;
        videoUrlInput.placeholder = 'Video URL';
        videoUrlInput.style.width = '200px';
        videoUrlInput.addEventListener('input', () => {
            config.videoUrl = videoUrlInput.value;
            saveSettings();
        });
        panel.appendChild(document.createTextNode('Video URL: '));
        panel.appendChild(videoUrlInput);
        panel.appendChild(document.createElement('br'));

        // Background image URL input
        const bgUrlInput = document.createElement('input');
        bgUrlInput.type = 'text';
        bgUrlInput.value = config.backgroundImageUrl;
        bgUrlInput.placeholder = 'Background Image URL';
        bgUrlInput.style.width = '200px';
        bgUrlInput.addEventListener('input', () => {
            config.backgroundImageUrl = bgUrlInput.value;
            saveSettings();
            document.body.style.backgroundImage = `url("${config.backgroundImageUrl}")`;
        });
        panel.appendChild(document.createTextNode('Background Image URL: '));
        panel.appendChild(bgUrlInput);
        panel.appendChild(document.createElement('br'));

        // Snowfall checkbox
        const snowCheckbox = document.createElement('input');
        snowCheckbox.type = 'checkbox';
        snowCheckbox.checked = config.snowEnabled;
        snowCheckbox.addEventListener('change', () => {
            config.snowEnabled = snowCheckbox.checked;
            saveSettings();
            if (config.snowEnabled) {
                createSnowfall();
            } else {
                removeSnowfall();
            }
        });
        panel.appendChild(document.createTextNode('Enable Snowfall: '));
        panel.appendChild(snowCheckbox);
        panel.appendChild(document.createElement('br'));

        // Video background checkbox
        const videoBgCheckbox = document.createElement('input');
        videoBgCheckbox.type = 'checkbox';
        videoBgCheckbox.checked = config.videoBackgroundEnabled;
        videoBgCheckbox.addEventListener('change', () => {
            config.videoBackgroundEnabled = videoBgCheckbox.checked;
            saveSettings();
            if (config.videoBackgroundEnabled) {
                setupVideoBackground();
            } else {
                removeVideoBackground();
            }
        });
        panel.appendChild(document.createTextNode('Enable Video Background: '));
        panel.appendChild(videoBgCheckbox);
        panel.appendChild(document.createElement('br'));

        // Rulikmod checkbox
        const rulikModCheckbox = document.createElement('input');
        rulikModCheckbox.type = 'checkbox';
        rulikModCheckbox.checked = config.rulikModEnabled;
        rulikModCheckbox.addEventListener('change', () => {
            config.rulikModEnabled = rulikModCheckbox.checked;
            saveSettings();
            if (config.rulikModEnabled) {
                startRulikMod();
            } else {
                stopRulikMod();
            }
        });
        panel.appendChild(document.createTextNode('Enable Rulikmod: '));
        panel.appendChild(rulikModCheckbox);
        panel.appendChild(document.createElement('br'));

        // Toggle button for showing/hiding settings panel
        const toggleButton = document.createElement('button');
        toggleButton.textContent = 'Rulik Mod';
        toggleButton.style.position = 'fixed';
        toggleButton.style.top = '900px';
        toggleButton.style.right = '10px';
        toggleButton.style.zIndex = '9999';
        toggleButton.style.padding = '5px 10px';
        toggleButton.style.backgroundColor = '#333';
        toggleButton.style.color = '#fff';
        toggleButton.style.border = 'none';
        toggleButton.style.borderRadius = '5px';
        toggleButton.style.cursor = 'pointer';
        toggleButton.addEventListener('click', () => {
            if (panel.style.display === 'none') {
                panel.style.display = 'block';
                toggleButton.textContent = 'Hide Rulik Mod Settings';
            } else {
                panel.style.display = 'none';
                toggleButton.textContent = 'Rulik Mod';
            }
        });

        // Append the toggle button and settings panel to the document
        document.body.appendChild(toggleButton);
        document.body.appendChild(panel);
    }

 function getRandomColor() { const letters = "0123456789ACDEF"; // Exclude 'B' to avoid blue shades
                            let color; do { color = "#"; for (let i = 0; i < 6; i++) { color += letters[Math.floor(Math.random() * letters.length)]; } } while (isBlueColor(color)); // Retry if color is blue
                            return color; } // Function to check if the color is blue or its shades
    function isBlueColor(color) { const blueRegex = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})/i; const match = blueRegex.exec(color); if (match) { const r = parseInt(match[1], 16); const g = parseInt(match[2], 16); const b = parseInt(match[3], 16); return b > r && b > g; // Check if blue component is dominant
                                                                                                                                                 } return false; }

// Function to add click listener to buttons with the specified class
function addClickListener(button) {
    button.addEventListener('click', () => {
        button.style.backgroundColor = getRandomColor();
    });
}

// Function to observe DOM changes and add click listener to new buttons
function observeDOMChanges() {
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.addedNodes.length) {
                mutation.addedNodes.forEach((node) => {
                    if (node.classList && node.classList.contains('form-block-buttons-submit')) {
                        addClickListener(node);
                    }
                });
            }
        });
    });

    observer.observe(document.body, { childList: true, subtree: true });
}

// Call the function to observe DOM changes
observeDOMChanges();


function handleMiddleClickOnCopyButton(event) {
    if (event.button === 1) { // Middle button (mouse wheel click)
        navigator.clipboard.readText().then(text => {
            if (text) {
                const searchUrl = `https://aladin-kiev.com/ua/search/?search=${encodeURIComponent(text)}`;
                window.open(searchUrl, '_blank');
                console.log(`Открыта новая вкладка с поиском по запросу: ${text}`);
            }
        }).catch(err => {
            console.log('Не удалось прочитать текст из буфера обмена:', err);
        });
    }
}

    function addClickHandlerToAllCopyButtons() {
    const copyButtons = document.querySelectorAll('.copy-button');
    copyButtons.forEach(button => {
        if (!button.dataset.listenerAdded) {
            button.addEventListener('mousedown', handleMiddleClickOnCopyButton);
            button.dataset.listenerAdded = "true"; // Чтобы не добавлять обработчик несколько раз
            console.log('Обработчик добавлен к кнопке.');
        }
    });
}

// Вызов функции для добавления обработчиков ко всем кнопкам


// Функция для добавления обработчика к кнопке
function addClickHandlerToCopyButton() {
    const copyButton = document.querySelector('.copy-button');
    if (copyButton && !copyButton.dataset.listenerAdded) {
        copyButton.addEventListener('mousedown', handleMiddleClickOnCopyButton);
        copyButton.dataset.listenerAdded = "true"; // Чтобы не добавлять обработчик несколько раз
        console.log('Обработчик добавлен к кнопке.');
    }
}

// Наблюдатель за изменениями DOM
const observer = new MutationObserver(() => {
   addClickHandlerToAllCopyButtons();
});

// Запускаем наблюдатель
observer.observe(document.body, { childList: true, subtree: true });

// Добавляем обработчик сразу при загрузке страницы
addClickHandlerToCopyButton();

    // Change the background image of the page
    document.body.style.backgroundImage = `url("${config.backgroundImageUrl}")`;
    document.body.style.backgroundSize = 'cover';

    // Function to enable/disable video background
    function setupVideoBackground() {
        if (config.videoBackgroundEnabled) {
            const video = document.createElement('video');
            video.src = config.videoUrl;
            video.autoplay = true;
            video.loop = true;
            video.muted = true;
            video.style.position = 'fixed';
            video.style.top = '0';
            video.style.left = '0';
            video.style.width = '100%';
            video.style.height = '100%';
            video.style.objectFit = 'cover';
            video.style.zIndex = '-1';
            document.body.appendChild(video);
        }
    }

    // Function to remove video background
    function removeVideoBackground() {
        const video = document.querySelector('video');
        if (video) {
            video.remove();
        }
    }

    // Function to create snowfall effect
    function createSnowfall() {
        if (config.snowEnabled) {
            const snowflakes = [];
            for (let i = 0; i < config.snowflakeCount; i++) {
                const snowflake = document.createElement('div');
                snowflake.className = 'snowflake';
                snowflake.style.position = 'fixed';
                snowflake.style.top = `${Math.random() * 100}vh`;
                snowflake.style.left = `${Math.random() * 100}vw`;
                snowflake.style.width = '10px';
                snowflake.style.height = '10px';
                snowflake.style.backgroundColor = config.snowflakeColor;
                snowflake.style.borderRadius = '50%';
                snowflake.style.opacity = Math.random();
                snowflake.style.zIndex = '9999';
                snowflake.style.animation = `fall ${Math.random() * 5 + 5}s linear infinite`;
                document.body.appendChild(snowflake);
                snowflakes.push(snowflake);
            }

            // Add CSS for snowfall animation
            const style = document.createElement('style');
            style.innerHTML = `
                @keyframes fall {
                    to {
                        transform: translateY(100vh);
                    }
                }
            `;
            document.head.appendChild(style);
        }
    }

    // Function to remove snowfall effect
    function removeSnowfall() {
        const snowflakes = document.querySelectorAll('.snowflake');
        snowflakes.forEach(snowflake => snowflake.remove());
    }



function removeBracketsAndNumbers(event) {
    event.preventDefault(); // Предотвращаем стандартное действие
    const selection = window.getSelection().toString(); // Получаем выделенный текст
    const modifiedText = selection.replace(/\[\d+\]|\(\d+\)/g, ''); // Удаляем скобки с цифрами
    event.clipboardData.setData('text/plain', modifiedText); // Сохраняем измененный текст в буфер обмена
}


function replaceChars(event) {
        event.target.value = event.target.value.replace(/[\s,юб]/g, '.');
    }

    // Function to add event listener with a delay
    function addEventListenerWithDelay() {
        var field = document.querySelector('#weight_1.form-shipment-store-table-left-row-control');
        if (field) {
            field.addEventListener('input', replaceChars);
        }
    }

    // Observer to detect dynamically added elements
    var observerReplace = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            var newNodes = mutation.addedNodes;
            newNodes.forEach(function(node) {
                if (node.id === 'weight_1' && node.classList.contains('form-shipment-store-table-left-row-control')) {
                    addEventListenerWithDelay();
                }
            });
        });
    });

    // Start observing the document for added nodes
    observerReplace.observe(document.body, { childList: true, subtree: true });

    // Also check for the element periodically in case it's missed by the observer
    setInterval(addEventListenerWithDelay, 2000); // 2-second interval
// Навешиваем обработчик на событие копирования
document.addEventListener('copy', removeBracketsAndNumbers);

    // Initialize all functions
    createSettingsPanel();
    setupVideoBackground();
    if (config.snowEnabled) createSnowfall();


///Fix barcodes


const barcodeMap = {
    ']C17460304025002': '2100100137359', // arawak 180
    ']C17460309025002': '2100100137342',
    ']C17460313025002': '2100100137335',
    ']C17460302025002': '2100100137311',
    ']C17460318025002': '2100100137304',
    ']C17460320025002': '2100100137298',
    ']C17460311025002': '2100100137281',
    ']C17460312025002': '2100100137274',
    ']C17460310025002': '7460310025002',
    ']C17460305025002': '2100100136451',
    ']C17460306025002': '2100100136444',
    ']C17460327025002': '2100100135362',
    ']C17460317025002': '2100100135355',
    ']C17460319025002': '2100100135348',
    ']C17460323025002': '2100100133337',
    ']C17460303025002': '2100100133313',
    ']C17460316025002': '2100100133306',
    ']C17460301025002': '2100100133290',
    ']C17460324025002': '2100100133283',
    ']C17460326025002': '2100100133276',
    ']C17460325025002': '2100100133252',
    ']C17460314025002': '2100100133245',
    '4823456780564': '4823456780038', // mexico
    '4823456780533': '4823456780052', // lemon cake
    '7460330004002': '2100100188788',
    ']C17460309004002': '2100100187156',
    ']C17460313004002': '2100100137991',
    ']C17460322004002': '7460322004002',
    ']C17460311004002': '2100100137960',
    ']C17460312004002': '2100100137953',
    ']C17460307004002': '2100100137939',
    ']C17460327004002': '2100100137243',
    ']C17460306004002': '2100100136437',
    ']C17460308004002': '7460308004002',
    ']C17460305004002': '2100100136413',
    ']C17460310004002': '2100100136406',
    ']C17460303004002': '2100100133207',
    ']C17460315004002': '2100100133191',
    ']C17460316004002': '2100100133184',
    ']C17460323004002': '2100100133177',
    ']C17460325004002': '2100100133153',
    ']C17460314004002': '2100100133146',
    ']C10148930590000008': '2100100189440',
    ']C10148930580000001': '2100100189433',
    ']C10148930540000003': '2100100189426',
    ']C10132982920000003': '2100100180638',
    ']C10132982960000001': '2100100180621',
    ']C10165988930000000': '2100100180607',
    ']C10132981540000004': '2100100180560',
    ']C10132981960000004': '2100100180553',
    ']C10122988920000008': '2100100180546',
    ']C10165988970000008': '2100100180515',
    ']C10164988940000008': '2100100180485',
    ']C10132981710000001': '2100100180478',
    ']C10132981170000009': '2100100180782',
    ']C10192988920000007': '2100100180720',
    ']C10165988990000002': '2100100180652',
    ']C10132981610000002': '2100100180751',
    ']C10132981940000000': '2100100187781',
    ']C10132981690000008': '2100100180775',
    ']C10184729275716004': '2100100196417',
    ']C10184729274732005': '2100100196882',
    ']C10132981870000002': '2100100196639',
    ']C10184729274734009': '2100100196622',
    ']C10184729275727000': '2100100196615',
    ']C10184729275713003': '2100100196608',
    ']C10184729275721008': '2100100196585',
    ']C10184729275726003': '2100100196578',
    ']C10132983920000000': '2100100196561',
    ']C10132981890000006': '2100100196554',
    ']C10132981930000003': '2100100196516',
    ']C10132981860000005': '2100100196509',
    ']C10132981980000008': '2100100196493',
    ']C10132982950000004': '2100100196486',
    ']C10132983940000004': '2100100196479',
    ']C10132983910000003': '2100100196462',
    ']C10132982940000007': '2100100196424',
    '8991475068232': '2100100107567'
};




    function replaceInputValue(event) {
        let inputValue = event.target.value.trim(); // Удаляем лишние пробелы
        const correctBarcode = barcodeMap[inputValue];
        console.log(`Сканируемый штрихкод: ${inputValue}`);
        if (correctBarcode) {
            event.target.value = correctBarcode;
            console.log(`Замена на правильный штрихкод: ${correctBarcode}`);

            // Имитация событий "input" и "change"
            const inputEvent = new Event('input', { bubbles: true, cancelable: true });
            event.target.dispatchEvent(inputEvent);

            // Имитация нажатия клавиши Enter
            const enterEvent = new KeyboardEvent('keydown', { bubbles: true, cancelable: true, key: 'Enter' });
            event.target.dispatchEvent(enterEvent);
        }
    }

    function replaceAndClearBarcode() {
        const barcodeInput = document.querySelector('#barcode.barcode-input');
        if (barcodeInput && barcodeInput.value) {
            const value = barcodeInput.value.trim(); // Удаляем лишние пробелы
            const correctBarcode = barcodeMap[value];
            console.log(`Найден штрихкод: ${value}`);
            // Замена некорректного штрих-кода на нужный, если он существует в карте
            if (correctBarcode) {
                barcodeInput.value = correctBarcode;
                console.log(`Замена на правильный штрихкод: ${correctBarcode}`);

                // Имитация событий "input" и "change"
                const inputEvent = new Event('input', { bubbles: true, cancelable: true });
                barcodeInput.dispatchEvent(inputEvent);

                // Имитация нажатия клавиши Enter
                const enterEvent = new KeyboardEvent('keydown', { bubbles: true, cancelable: true, key: 'Enter' });
                barcodeInput.dispatchEvent(enterEvent);
            }
            // Очистка поля
            setTimeout(() => {
                barcodeInput.value = '';
                console.log('Поле очищено');
            }, 5);
        }
    }

    // MutationObserver to detect changes in the DOM
    const observerClearBarcode = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
                replaceAndClearBarcode();
            }
        });
    });

    // Configuration for the observer
    const configBarCodes = {
        childList: true,
        subtree: true
    };

    // Start observing the document
    observerClearBarcode.observe(document.body, configBarCodes);

    // Добавление обработчика события изменения ввода
    document.body.addEventListener('input', replaceInputValue);

})();

